(function() {
    var type_impls = Object.fromEntries([["darkfi_sdk",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncDecodable-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-AsyncDecodable-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; AsyncDecodable for BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: AsyncDecodable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + Hashable,\n    C: AsyncDecodable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.decode_async\" class=\"method trait-impl\"><a href=\"#method.decode_async\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_async</a>&lt;'life0, 'async_trait, D&gt;(\n    d: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;'life0 mut D</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BridgeTree&lt;H, C, DEPTH&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    D: 'async_trait + AsyncRead + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    BridgeTree&lt;H, C, DEPTH&gt;: 'async_trait,</div></h4></section></div></details>","AsyncDecodable","darkfi_sdk::crypto::merkle_node::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncEncodable-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-AsyncEncodable-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; AsyncEncodable for BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: AsyncEncodable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    C: AsyncEncodable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_async\" class=\"method trait-impl\"><a href=\"#method.encode_async\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_async</a>&lt;'life0, 'life1, 'async_trait, S&gt;(\n    &amp;'life0 self,\n    s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;'life1 mut S</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    'life1: 'async_trait,\n    S: 'async_trait + AsyncWrite + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    BridgeTree&lt;H, C, DEPTH&gt;: 'async_trait,</div></h4></section></summary><div class='docblock'>Asynchronously encode an object with a well-defined format.\nShould only ever error if the underlying <code>AsyncWrite</code> errors.\nReturns the number of bytes written on success.</div></details></div></details>","AsyncEncodable","darkfi_sdk::crypto::merkle_node::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; BridgeTree&lt;H, C, DEPTH&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(max_checkpoints: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; BridgeTree&lt;H, C, DEPTH&gt;</h4></section></summary><div class=\"docblock\"><p>Construct an empty BridgeTree value with the specified maximum number of checkpoints.</p>\n<p>Panics if <code>max_checkpoints &lt; 1</code> because mark/rewind logic depends upon the presence\nof checkpoints to function.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prior_bridges\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">prior_bridges</a>(&amp;self) -&gt; &amp;[MerkleBridge&lt;H&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the prior bridges that make up this tree</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_bridge\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">current_bridge</a>(&amp;self) -&gt; &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MerkleBridge&lt;H&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the current bridge at the tip of this tree</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.marked_indices\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">marked_indices</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;Position, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the map from leaf positions that have been marked to the index of\nthe bridge whose tip is at that position in this tree’s list of bridges.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checkpoints\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">checkpoints</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;Checkpoint&lt;C&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the checkpoints to which this tree may be rewound.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_checkpoints\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">max_checkpoints</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the maximum number of checkpoints that will be maintained\nby the data structure. When this number of checkpoints is exceeded,\nthe oldest checkpoints are discarded when creating new checkpoints.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frontier\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">frontier</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;NonEmptyFrontier&lt;H&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bridge’s frontier.</p>\n</div></details></div></details>",0,"darkfi_sdk::crypto::merkle_node::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: Hashable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_frontier\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_frontier</a>(\n    max_checkpoints: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>,\n    frontier: NonEmptyFrontier&lt;H&gt;,\n) -&gt; BridgeTree&lt;H, C, DEPTH&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new BridgeTree that will start recording changes from the state of\nthe specified frontier.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_parts</a>(\n    prior_bridges: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;MerkleBridge&lt;H&gt;&gt;,\n    current_bridge: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MerkleBridge&lt;H&gt;&gt;,\n    saved: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;Position, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;,\n    checkpoints: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;Checkpoint&lt;C&gt;&gt;,\n    max_checkpoints: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BridgeTree&lt;H, C, DEPTH&gt;, BridgeTreeError&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new BridgeTree from its constituent parts, checking for internal\nconsistency.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">append</a>(&amp;mut self, value: H) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Appends a new value to the tree at the next available slot.\nReturns true if successful and false if the tree would exceed\nthe maximum allowed depth.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">root</a>(&amp;self, checkpoint_depth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;H&gt;</h4></section></summary><div class=\"docblock\"><p>Obtains the root of the Merkle tree at the specified checkpoint depth\nby hashing against empty nodes up to the maximum height of the tree.\nReturns <code>None</code> if there are not enough checkpoints available to reach the\nrequested checkpoint depth.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_position\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">current_position</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Position&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the most recently appended leaf value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_leaf\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">current_leaf</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;H</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the most recently appended leaf value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mark\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mark</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Position&gt;</h4></section></summary><div class=\"docblock\"><p>Marks the current leaf as one for which we’re interested in producing a witness.</p>\n<p>Returns an optional value containing the current position if successful or if the current\nvalue was already marked, or None if the tree is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.marked_positions\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">marked_positions</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/collections/btree/set/struct.BTreeSet.html\" title=\"struct alloc::collections::btree::set::BTreeSet\">BTreeSet</a>&lt;Position&gt;</h4></section></summary><div class=\"docblock\"><p>Return a set of all the positions for which we have marked.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_marked_leaf\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_marked_leaf</a>(&amp;self, position: Position) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;H</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the leaf at the specified position if the tree can produce\na witness for it.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_mark\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_mark</a>(&amp;mut self, position: Position) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Marks the value at the specified position as a value we’re no longer\ninterested in maintaining a mark for. Returns true if successful and\nfalse if we were already not maintaining a mark at this position.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checkpoint\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">checkpoint</a>(&amp;mut self, id: C) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Creates a new checkpoint for the current tree state, with the given identifier.</p>\n<p>It is valid to have multiple checkpoints for the same tree state, and each <code>rewind</code> call\nwill remove a single checkpoint. Successive checkpoint identifiers must always be provided\nin increasing order.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rewind\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Rewinds the tree state to the previous checkpoint, and then removes\nthat checkpoint record. If there are multiple checkpoints at a given\ntree state, the tree state will not be altered until all checkpoints\nat that tree state have been removed using <code>rewind</code>. This function\nreturn false and leave the tree unmodified if no checkpoints exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.witness\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">witness</a>(\n    &amp;self,\n    position: Position,\n    checkpoint_depth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;H&gt;, WitnessingError&gt;</h4></section></summary><div class=\"docblock\"><p>Obtains a witness for the value at the specified leaf position, as of the tree state at the\ngiven checkpoint depth. Returns <code>None</code> if there is no witness information for the requested\nposition or if no checkpoint is available at the specified depth.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.garbage_collect\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">garbage_collect</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove state from the tree that no longer needs to be maintained\nbecause it is associated with checkpoints or marks that\nhave been removed from the tree at positions deeper than those\nreachable by calls to <code>rewind</code>.</p>\n</div></details></div></details>",0,"darkfi_sdk::crypto::merkle_node::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-Clone-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; BridgeTree&lt;H, C, DEPTH&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","darkfi_sdk::crypto::merkle_node::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-Debug-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","darkfi_sdk::crypto::merkle_node::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-Decodable-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; Decodable for BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: Decodable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + Hashable,\n    C: Decodable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>&lt;D&gt;(d: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BridgeTree&lt;H, C, DEPTH&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></div></details>","Decodable","darkfi_sdk::crypto::merkle_node::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-Encodable-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; Encodable for BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: Encodable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    C: Encodable + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>&lt;S&gt;(&amp;self, s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut S</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Encode an object with a well-defined format.\nShould only ever error if the underlying <code>Write</code> errors.\nReturns the number of bytes written on success.</div></details></div></details>","Encodable","darkfi_sdk::crypto::merkle_node::MerkleTree"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;BridgeTree&lt;H, C, DEPTH&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","darkfi_sdk::crypto::merkle_node::MerkleTree"],["<section id=\"impl-Eq-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-Eq-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for BridgeTree&lt;H, C, DEPTH&gt;<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","darkfi_sdk::crypto::merkle_node::MerkleTree"],["<section id=\"impl-StructuralPartialEq-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-BridgeTree%3CH,+C,+DEPTH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, C, const DEPTH: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for BridgeTree&lt;H, C, DEPTH&gt;</h3></section>","StructuralPartialEq","darkfi_sdk::crypto::merkle_node::MerkleTree"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[34533]}