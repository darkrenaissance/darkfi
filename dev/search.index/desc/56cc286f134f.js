rd_("CkThe largest integer such that $2^c \\leq (r_P - 1) / 2$, \xe2\x80\xa6Bi$2^{<code>FIXED_BASE_WINDOW_SIZE</code>}$BkNumber of bits of each message piece in \xe2\x80\xa6EhAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> \xe2\x80\xa6BaFull-width u-values for GENERATOR0000BaFull-width z-values for GENERATOR0000clhsAmReturns the curve constant a.AoReturns the curve constant $a$.crhsAmReturns the curve constant b.AoReturns the curve constant $b$.coutAkNumber of nodes in a bucketDbFetch the <code>x</code> coordinate of this <code>PublicKey</code>DbFetch the <code>y</code> coordinate of this <code>PublicKey</code>nList resourcesAjContains the success value0000000AjRemove a resource from fudBnHost functions for interacting with db backendAbDatabase functionsDhPointer managed by the <code>MetricsStore</code> that references the \xe2\x80\xa6AjExplorer database instanceBgGlobal multithreaded executor referencejRequest ID00BnHash the <code>Event</code> to retrieve its IDAoNumeric identifier for the voteAkThe Contract ID as a stringAgThe node id on the DHT.BiSerialized deployment payload instructionkKey + valueAeTransaction structureAjHalo2 zkas virtual machineFaFetch the <code>x</code> and <code>y</code> coordinates of this <code>PublicKey</code> as a tupleAfCatch-all for any typeC`An enum over the Advice, Fixed, Instance structsAeMilliSeconds in a dayCiDAOs are represented on chain as a commitment to this \xe2\x80\xa6AbCLI-util structurehECC ChipCjThe WASM VM runtime environment instantiated for every \xe2\x80\xa6AhContains the error value0000000BoRetrieve provided resource from the fud networkcNymCjThe one element of the field, the multiplicative identity.0BjToplevel peer-to-peer networking interfaceAh(Bincode, Namespace, VK)BlPut a file or directory onto the fud networkBbThis is the sum of two polynomialsiPlain TCP0cTor04BaAccess control for host functionsBkAdd two field elements and return their sumDaAdds new <code>GasData</code> to the existing accumulated values.oAdd a new task.lLanguage ASTBjBan a malicious peer and stop the channel.DoGet <code>i</code>-th bit from bytes slice. Index <code>i</code> starts from 0.B`Command-line interface utilitiesAlSled tree containing the DAGBcWallet functionality related to DaoBfThe on chain representation of the DAOAnTools for developing circuits.AmThe <code>Dht</code> instanceDc<code>DhtHandler</code> implementation and fud-specific DHT structsA`The DHT instancelDHT settingsAkHeight accumulated fee paidBhFlag indicating if fun stuff are enabledClFetch given block hashes from the overlay\xe2\x80\x99s main tree. \xe2\x80\xa6CnFetch given block hashes from the store\xe2\x80\x99s main tree. The \xe2\x80\xa6ClFetch given headerhashes from the overlay. The resulting \xe2\x80\xa6CkFetch given header hashes from the store\xe2\x80\x99s main tree. \xe2\x80\xa6CmFetch given tx hashes from the overlay\xe2\x80\x99s main tree. The \xe2\x80\xa6CkFetch given tx hashes from the store\xe2\x80\x99s main tree. The \xe2\x80\xa6CnFetches the bincode for a given ContractId from the overlay\xe2\x80\xa6ClFetches the bincode for a given ContractId from the store\xe2\x80\xa6CeFetch file/directory metadata from Geode. Returns \xe2\x80\xa6BkGet immutable reference to the inner value.BkGet a leaf hash for the given root and key.CfRetrieves associated contract metadata for a given \xe2\x80\xa6DjFetches <code>GasMetrics</code>s associated with the provided slice of \xe2\x80\xa6CmStart downloading a file or directory from the network to \xe2\x80\xa6CgCreates a hex formatted string of the data (big endian)B`Hex encoding/decoding from bytes1hKey onlyBbResource that this seeder providesAcKey + value + colorAlRetrieve stored blocks countBlRetrieve store\xe2\x80\x99s order tree records count.CbRetrieve records count of the store\xe2\x80\x99s main tree.AlReturn the number of chunks.BkReturn the combined file size of all files.CaReturns the current number of items in the bufferCdReturn the count of all <code>DarkTree</code> leafs.CfReturn the count of all <code>DarkForest</code> leafs.ClProvides the number of stored <code>ContractMetaData</code>.CgProvides the number of stored metrics in the main tree.AfLogging infrastructureAjSet log file to ouput intoCdAuxiliary function to append messages to the buffer.AiSet log file to output toBlSet log file path to output daemon logs into3FcMaps a <code>Value&lt;V&gt;</code> to <code>Value&lt;W&gt;</code> by applying a function to the \xe2\x80\xa6ClMaximum number of addresses with preferred transports to \xe2\x80\xa6Cjstd::cmp::max() extension for use with multiple arguments.CdThe largest value in the series of measured metrics.BbTemporary memory for Equi-X to useCjstd::cmp::min() extension for use with multiple arguments.CeThe smallest value in the series of measured metrics.AjPrint a message to the logCdMultiply two field elements and return their productAdP2P network settingsA`Network settingsCnCreate a new wasm runtime instance that contains the given \xe2\x80\xa6DcInstantiate a new <code>BlockchainOverlay</code> over the given \xe2\x80\xa6EdInstantiate a new <code>Blockchain</code> with the given <code>sled</code> database.DeOpens a new or existing <code>BlockStore</code> on the given sled \xe2\x80\xa6CnGenerates a new header with default transactions and state \xe2\x80\xa6DfOpens a new or existing <code>HeaderStore</code> on the given sled \xe2\x80\xa6DhOpens a new or existing <code>TxStore</code> on the given sled database.DhOpens a new or existing <code>ContractStore</code> on the given sled \xe2\x80\xa6EhInstantiate a new <code>Geode</code> object. <code>base_path</code> defines the root \xe2\x80\xa6DkSets up a new channel. Creates a reader and writer <code>PtStream</code>\xe2\x80\xa6AmInitialize a new p2p network.AgCreate a new hosts listDbGenerate a new <code>MeteringConfiguration</code> for provided \xe2\x80\xa6CjGenerate a new <code>MeteringQueue</code> for provided \xe2\x80\xa6AoCreate a new message dispatcherAoCreate a new message subsystem.EgInstantiate a new <code>Dialer</code> with the given <code>Url</code> and datastore \xe2\x80\xa6DoInstantiate a new <code>Listener</code> with the given <code>Url</code> and \xe2\x80\xa6C`Instantiate a new <code>UnixDialer</code> objectCbInstantiate a new <code>UnixListener</code> objectCjInstantiate a new <code>Socks5Dialer</code> with given URIChInstantiate a new SOCKS5 client from given host and portCkInstantiate a new <code>TcpDialer</code> with optional TTL.DcInstantiate a new <code>TcpListener</code> with given backlog size.BoInstantiate a new <code>TorDialer</code> objectBjInstantiate a new <code>TorListener</code>BoInstantiate a new <code>NymDialer</code> objectBbCreate a new protocol jobs managerBoInstantiate a new <code>ProtocolRegistry</code>CnCreate a new version protocol. Makes a version and version \xe2\x80\xa6CnGenerate a new ProtocolGenericHandler for the provided P2P \xe2\x80\xa6AlCreate a new inbound sessionAlCreate a new manual session.AnCreate a new outbound session.BgCreate a new seed sync session instanceAlCreate a new direct session.AkCreate new Acceptor object.CbCreate a new connector with given network settingsCjInstantiate a new JSON-RPC client that connects to the \xe2\x80\xa60DjCreate a new <code>JsonRequest</code> object with the given method and \xe2\x80\xa6DkCreate a new <code>JsonNotification</code> object with the given method \xe2\x80\xa6DgCreate a new <code>JsonResponse</code> object with the given ID and \xe2\x80\xa6DiCreate a new <code>JsonError</code> object with the given error code, \xe2\x80\xa6AjConstruct a new publisher.CkInitialize the builder, using provided data to generate \xe2\x80\xa6CnCreate a new <code>RingBuffer</code> with given fixed capacityAoGenerate a new Consensus state.B`Constructs a new batch verifier.BgConstructs a new single proof verifier.DhCreate a new <code>EventGraph</code> instance, creates a new Genesis \xe2\x80\xa6DiCreate a new event with the given data and an <code>EventGraph</code> \xe2\x80\xa6BnInstantiate a new <code>Wallet</code> instanceEeInstantiate a new <code>TestHarness</code> given a slice of <code>Holder</code>s. \xe2\x80\xa6DcEvery <code>DarkTreeLeaf</code> is initiated using default indexes.DkInitialize a <code>DarkTree</code>, using provided data to generate its \xe2\x80\xa60DeInstantiate a new <code>Keypair</code> given a <code>SecretKey</code>AaCreates a new SMTEaInstantiate a new <code>CacheOverlay</code> over the given <code>Cache</code> \xe2\x80\xa6DoInstantiate a new <code>Cache</code> with the given <code>sled</code> database.DdGenerate new <code>DaoParams</code>. If a specific secret key is \xe2\x80\xa6EdCreate a new wallet database handler. If <code>path</code> is <code>None</code>, \xe2\x80\xa6CgCreates a new <code>BlockchainExplorer</code> instance.BnCreates a new <code>ExplorerDb</code> instanceCbCreates a <code>ContractMetaStore</code> instance.DdInstantiate a <code>ContractMetadataStoreOverlay</code> over the \xe2\x80\xa6CcCreates a <code>ContractSourceFile</code> instance.DeInstantiate a <code>MetricsStoreOverlay</code> over the provided [\xe2\x80\xa6DdConstructs a <code>Metrics</code> instance with provided parameters.BkCreates a <code>GasMetrics</code> instance.DiCreates a <code>MetricsStore</code> instance by opening the necessary \xe2\x80\xa6DjCreates a new <code>GasMetricsKey</code> from a source that implements \xe2\x80\xa6CaCreates a new client with an inactive connection.CnCreates a new configuration from a given file path. If the \xe2\x80\xa6CdCreates a new <code>ExplorerService</code> instance.CkNew uninitialized memory, usable as solver temporary space.CmCreate a new <code>EquiXBuilder</code> with default settings.BcBuild a new <code>Challenge</code>.mNym transportAcP2P network pointerBaPointer to the whole P2P instanceBnReturns a pointer to the p2p network interfaceBaWeak pointer to parent p2p object00BcPointer to the P2P network instanceClP2P provides all core functionality to interact with the \xe2\x80\xa651kP2P pointerCmPermuted Congruential Generator (PCG) This is an insecure \xe2\x80\xa6CaRemoves and returns the oldest item in the bufferAaDarkFi PoW moduleFbExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian \xe2\x80\xa60cPoWB`The <code>FudPow</code> instancelPoW settingsClRecursively insert a bytes (in forms of Bits) and a leaf \xe2\x80\xa6BdAdd a resource from the file system.BnThe circuit row on which the failure occurred.CgThe absolute row at which this cell should be assigned.BeJSON-RPC requests handler and methodsAaJSON-RPC settingsB`darkfid JSON-RPC related methodsBnManages JSON-RPC interactions for the explorerCfJSON-RPC settings used to set up a server that the \xe2\x80\xa6AhJSON-RPC related methods44AgJSON-RPC server methodsCmStart version information exchange. Start the timer. Send \xe2\x80\xa6CiAttempts a connection on the associated Connector object.CjActivate peer discovery if not active already. For the \xe2\x80\xa6CgMain seedsync connection process that is started on \xe2\x80\xa6CfPeer discovery\xe2\x80\x99s main process. For the first two \xe2\x80\xa6ClRuns a synthetic keygen-and-prove operation on the given \xe2\x80\xa6CaSignature of the random u64 from the ping requestBoHost functions for sparse merkle tree functionsBfPoseidon-based sparse Merkle tree chipCjSparse Merkle Tree implementation This file provides a \xe2\x80\xa6CgSubtract two field elements and return their differenceCjAn aggregate value that represents the sum of the metrics.mTCP transportBcCanonical(confirmed) tip block hash0AeTLS upgrade mechanismmTor transportD`TTL to set for opened sockets, or <code>None</code> for default.AaTrasaction hashesAdTransactions payloadBh<code>ProtocolTx</code> messages handlerBoUtility module for caching ZK proof PKs and VKsCgZips <code>self</code> with another <code>Value</code>.AbBase field elementCdThe base field over which this elliptic curve is \xe2\x80\xa60Ch<code>BitVec</code> implementation based on bytes slice.DiA type for describing components of <code>Node</code>: a real element \xe2\x80\xa6CbA <code>Coin</code> represented in the Money stateCkPeers that do not match our accepted transports. We are \xe2\x80\xa6BaEntrypoint function of a contractBnStruct representing a forked blockchain state.BhFree up a peer for any future operation.CbMetadata about a configured gate within a circuit.dGateCkNodes to which we have already been able to establish a \xe2\x80\xa6CkIntermediary nodes that are periodically probed and updatedBhType indicating fixed length byte-array.CjHost that are moving between hostlists, implemented in \xe2\x80\xa6EhThe only component of <code>monotree</code>. In a big picture, <code>monotree</code> \xe2\x80\xa6iNo value.CmIntermediate opcode for the compiler, should never appear \xe2\x80\xa6BkPlaceholder state before any initializationA`Null type value.CnThe path contains a sequence of sibling nodes that make up \xe2\x80\xa6CmThe prime field can be converted back and forth into this \xe2\x80\xa6CnRepresents the type of the \xe2\x80\x9croot\xe2\x80\x9d of this layouter, so \xe2\x80\xa6BjSize of the solver memory region, in bytesAfSkip message broadcastBbSome value of type <code>T</code>.AiStop the channel entirelyFaA component of <code>Node</code> consisting of <code>Hash</code> and <code>Bits</code>, which \xe2\x80\xa6kUnix socket0CeThe zero element of the field, the additive identity.0AgThe field element zero.0DhProvides a reference to the back element, or <code>None</code> if empty.DjCall a contract method defined by a <code>ContractSection</code> using \xe2\x80\xa6mCall executedDdCast from a typed scalar to another based on <code>num_traits</code>AaReturns the cell.jError codemThe coin hashDgThe <code>OwnCoin</code> containing necessary metadata to create an \xe2\x80\xa600BlThe coin to be used as the input to the swapkMinted coin0AeThe newly minted coin00BbConnection to the SQLite database.BgAssign two cells to have the same valueChDeveloper tools for investigating the cost of a circuit.AcCubes this element.AiCubes this field element.11AhData holded by this leafB`Call data passed to the contractCkPlaintext proposal call data the members share between themDkDial an instantiated <code>Dialer</code>. This creates a connection and \xe2\x80\xa6ChOptional events based debug-notify subsystem. Off by \xe2\x80\xa6BcSkip the first <code>n</code> bits.CcApply the curve endomorphism by multiplying the \xe2\x80\xa6BmPerforms an Eval() step of the MiMC-based VDFClThis function runs when someone wants to execute a smart \xe2\x80\xa6AgFee calculation helpersBeRewarded block transactions paid feesAdFilesystem utilitiesAoReturns the argument unchangedmThe index of the active gate.0DiThis method is intended to use the <code>get()</code> method in batch \xe2\x80\xa6CfA block\xe2\x80\x99s hash is the same as the hash of its header0AlCompute the header\xe2\x80\x99s hash.AhGet the transaction hashjBlock hashBcCanonical(confirmed) tip block hashmResource hash0BfResource hash (used as key in the DHT)BmAuxiliary function to print the help message.AbSOCKS5 server hostAbChannel debug infoCmLeaf\xe2\x80\x99s data, along with its parent and children indexes \xe2\x80\xa6CiTry to initialize a new contract state. Contracts can \xe2\x80\xa6B`Create a new ping-pong protocol.ChCreates a new address protocol. Makes an address, an \xe2\x80\xa6AkCreate a new seed protocol.BbInitialize a new generic protocol.AkInitialize a DarkFi daemon.BkInitialize a Darkfid P2P protocols handler.DeInitialize a generic prototocol handler for <code>Proposal</code> \xe2\x80\xa6CfInitialize the generic prototocol handlers for all \xe2\x80\xa6DhInitialize a generic prototocol handler for <code>Transaction</code> \xe2\x80\xa6ChInitializes the explorer service by deploying native \xe2\x80\xa6CmBootstrap the DHT, verify our resources, add ourselves to \xe2\x80\xa6BbInitialize a DarkFi mining daemon.BaCalls <code>U::from(self)</codejReturn an iterator over the chunks and their availability.B`Returns a front-to-back iteratorClImmutably iterate through the tree, using DFS post-order \xe2\x80\xa6BhRetrieve the last block height and hash.0CcThis tree\xe2\x80\x99s leaf information, along with its dataAkGet current open tasks ids.CmAcquires a lock on the database, opening a specified tree \xe2\x80\xa6ChReturns the log2 value of the given number. Used for \xe2\x80\xa6AmLogs produced by the contractDgMain <code>sled</code> tree, storing all the blockchain\xe2\x80\x99s blocks, \xe2\x80\xa6DiMain <code>sled</code> tree, storing all the blockchain\xe2\x80\x99s blocks\xe2\x80\x99 \xe2\x80\xa6CoMain <code>sled</code> tree, storing all the blockchain\xe2\x80\x99s \xe2\x80\xa6CnPrimary sled tree for storing contract metadata, utilizing \xe2\x80\xa6ChPrimary sled tree for storing gas metrics, utilizing \xe2\x80\xa6AnAttached memo (arbitrary data)ClAsync task to generate and mine provided fork index next \xe2\x80\xa6AgReturns configured nameAdReturn the gate nameAkName identifier for the DAOBaThe optional name of the contractAbString identifier,CkGrab next item iterator visits and return its immutable \xe2\x80\xa6CiGrab next item iterator visits and return its mutable \xe2\x80\xa6CgMove next item iterator visits from the tree to the \xe2\x80\xa6BiThe DHT node the channel is connected to.A`Get our own nodeAdDarkfi node instanceAdSeeder\xe2\x80\x99s node dataCdMiner node instance conducting the mining operationsnEncrypted note0BcThe attached <code>MoneyNote</code>BiDecrypted note associated with the outputAcAEAD encrypted noteoNote encryptionAdTransaction paid feeBdReturns the path bitmap of the proofAiFilesystem path utilitiesCmPath from leaf to root. It is a list of sibling nodes. It \xe2\x80\xa60BmPath to the configuration if read from a fileBdDownload path (relative or absolute)AkFile path or directory pathBfPath of the resource on the filesystemCkSend a DHT ping request, which is used to know the node \xe2\x80\xa6ClAuxiliary function to ping configured darkfid daemon for \xe2\x80\xa6CnSends a ping request to the client\xe2\x80\x99s darkfid endpoint to \xe2\x80\xa6AbSOCKS5 server portChWhen the user puts a port of 0, the OS will assign a \xe2\x80\xa6CgAdd new metering value to the queue, after prunning \xe2\x80\xa6DhPush an element to the back of the <code>RingBuffer</code>, removing \xe2\x80\xa6BgReads a verification key from a buffer.CiReads a proving key from a buffer. Does so by reading \xe2\x80\xa6AmReturns the Merkle tree root.AgReseed the P2P network.CkSends a message across a channel. First it converts the \xe2\x80\xa6BkSign block header using provided secret keyAdSign a given messageCjReturns the square root of the field element, if it is \xe2\x80\xa60CgStops the channel. Notifies all publishers that the \xe2\x80\xa6AnStop the running P2P subsystemAjStops the inbound session.AiStops the manual session.AkStops the outbound session.AjStop the seedsync session.BoStop the refinery and self handshake processes.AiStops the direct session.BiStop accepting inbound socket connectionsDjStop the JSON-RPC client. This will trigger <code>stop()</code> on the \xe2\x80\xa60CmStops the task. On completion, guarantees the process has \xe2\x80\xa6AgStop the DarkFi daemon.A`Stop the client.BgStop the Darkfid P2P protocols handler.ChStop the <code>ProtocolProposal</code> background tasks.CdStop all <code>ProtocolSync</code> background tasks.CaStop the <code>ProtocolTx</code> background task.4CeCloses the connection with the connected darkfid, \xe2\x80\xa6oStop all tasks.AnStop the DarkFi mining daemon.lSwap methodsDiThe <code>sled</code> tree storing all the node pending headers while \xe2\x80\xa6Bj<code>ProtocolSync</code> messages handlerBdManages synchronization with darkfidBbGet the first <code>n</code> bits.ChHandler background task to run the messages listener \xe2\x80\xa6DbThe stoppable task pointer, used on <code>RpcClient::stop()</code>DfThe stoppable task pointer, used on <code>RpcChadClient::stop()</code>AeValidator async tasksnTime utilitiesCdMerkle tree of coins used to create inclusion proofsAeUnix socket transportAlHost functions for utilitiesAmJson helper methods and typesAaUtility functionsAeConvenience utilities1AgMiscellaneous utilitieseUtilsBeProvides core structs for DAO::vote()CiBlocks execution until we receive a notification from \xe2\x80\xa6ChReset the condition variable and wait for a notificationDdThe <code>sled</code> tree storing the wasm bincode for deployed \xe2\x80\xa6AjWasm calls gas consumptionAbWASM API functionsDd<code>src/zkas</code> is the library holding the zkas toolchain, \xe2\x80\xa6AaArray type value.CfHostile peers that can neither be connected to nor \xe2\x80\xa6CnBlinding factor used in bullas. Every bulla should contain \xe2\x80\xa6EfThis struct represents a tuple of the form (<code>header</code>, <code>txs</code>, \xe2\x80\xa6CdStructure holding all sled trees that define the \xe2\x80\xa6CgEfficient representation of an elliptic curve point \xe2\x80\xa6CnGenerator of the <code>t-order</code> multiplicative subgroup.AgDummy intermediate type0AgElliptic curve additionAmElliptic curve multiplicationCgThis is an error that could occur during proving or \xe2\x80\xa6CdGeneral library errors used throughout the codebase.BmRepresentation of an event in the Event GraphBlThis trait represents an element of a field.0oA Fixed variantChThis is a fixed column queried at a certain relative \xe2\x80\xa6nA fixed columnBcChunk-based file storage interface.CjThis trait represents an element of a cryptographic group.ClMain parent class for the management and manipulation of \xe2\x80\xa6BcA contract call\xe2\x80\x99s anonymous inputBlMaximum allowed k param (circuit rows = 2^k)B`Type representing a Merkle proofBiStruct representing a spawned P2P networkBjA value that might exist within a circuit.eWatchBmRecently seen hosts. Shared with other nodes.BdNumber of lookup requests in a burstDjThis function runs after successful execution of <code>exec</code> and \xe2\x80\xa6CeSimultaneously blinds the coin and ensures uniqueness000A`Blinding factorsB`Block header hash of that heightjBlock dataDiBuilder builds the calls vector using the <code>DarkForest</code> and \xe2\x80\xa6DjBuild the <code>DarkTree</code> indexes and perform an integrity check \xe2\x80\xa6DiBuild each individual <code>DarkTree</code> indexes and be used after \xe2\x80\xa6DhBuild an <code>EquiX</code> instance with a challenge string and the \xe2\x80\xa6BlBlockchain cache database operations handler0AkContract calls trees forestBbCalls executed in this transactionAiChips used in the circuitCbPrune expired metering information from the queue.C`Cleans existing items from the receiver channel.BmClean out expired timestamps from the window.lMinted coinsAfThe newly minted coinsAoNumber of nodes in a DHT bucketBdFork proposal overlay diffs sequenceBnReturn a dummy identity <code>Signature</code>CcElliptic curve VRF (Verifiable Random Function) \xe2\x80\xa6CbCurrent blockchain epoch (based on current height)BaEqui-X Proof-of-Work using Equi-XBaConfiguration settings for Equi-XBaJSON-RPC error (code and message)mError emitterAhInternal contract errorsoContract errors1nError handlingkError codeslCrate errorsAbDaemon error codesAdAn event graph eventhFudEventCjList of (file path, file size). File sizes are not the \xe2\x80\xa60CnOptional list of files you want to download (only used for \xe2\x80\xa6kFile hashesAgGet the very first bit.BfFork chains containing block proposalsCfChunk-based file storage implementation. This is a \xe2\x80\xa6AbThe Geode instanceCiAuxiliary function to define the interactive shell hints.CcHosts are a list of network addresses used when \xe2\x80\xa6BmReturn an atomic pointer to the list of hostsAcKnown hosts (peers)DjSetup <code>DarkTree</code>\xe2\x80\x99s leafs indexes, based on DFS post-order \xe2\x80\xa6CnSetup each individual <code>DarkTree</code>\xe2\x80\x99s leafs indexes.CkIndex showcasing this leaf\xe2\x80\x99s position, when all leafs \xe2\x80\xa6ClReturns the inner <code>u64</code> of <code>Timestamp</code>BjReference the raw inner base field element000C`Get the inner <code>pallas::Base</code> element.CfGet the inner object wrapped by <code>SecretKey</code>CfGet the inner object wrapped by <code>PublicKey</code>23BkGets the inner <code>DateTime</code> value.oAnonymous inputkClear input0BjClone the input portion of this challenge.AiConstructs a known value.AlDAG layer index of the eventlLexer moduleAkCall parameters definitions00BeWallet functionality related to MoneyClThe block\xe2\x80\x99s nonce. This value changes arbitrarily with \xe2\x80\xa60BjClone the nonce portion of this challenge.DfThe <code>sled</code> tree storing the order of the blockchain\xe2\x80\x99s \xe2\x80\xa6oParsing helpersCiReturn the list of connected peers. Seed and refinery \xe2\x80\xa6BaPeer nodes to manually connect to0AjManual peers to connect toCjThis module provides an implementation of a variant of \xe2\x80\xa6AbProof creation APIBdThe ZK proof created in this builderBoP2P protocol implementation for the Event GraphAaP2P net protocolsmP2P protocolsCgExecute the VRF function and create a proof given a \xe2\x80\xa6BkSelector for the <code>add</code> operationBkSelector for the <code>mul</code> operationBkSelector for the <code>sub</code> operationCkRing buffer keeping track of action execution timestamp andkBlock ranksBjReset the DHT state (nodes and hash table)ChReset self ready to wait() again. The reason this is \xe2\x80\xa6CdAuxiliary function to completely reset wallet state.CeReset the database and start syncing from first blockBaResource type (file or directory)A`Scrap definitionCfSeed nodes to connect to for peer discovery and/or \xe2\x80\xa6CgSeed nodes to connect to for peers retrieval and/or \xe2\x80\xa6AiOther seeds to connect toB`Sleep for any number of seconds.AiOutbound connection slotsBoSearch for solutions to a particular challenge.CcSpawns a new task and adds it to the internal queueCnStarts the channel. Runs a receive loop to start receiving \xe2\x80\xa6BnStarts inbound, outbound, and manual sessions.AlRuns the task on an executorCfStarts ping-pong keepalive messages exchange. Runs \xe2\x80\xa6CmStart the address protocol. If it\xe2\x80\x99s an outbound session \xe2\x80\xa6CkStarts the seed protocol. Creates a subscription to the \xe2\x80\xa6CcStarts the inbound session. Begins by accepting \xe2\x80\xa6CjStart the outbound session. Runs the channel connect loop.CkInitialize the seedsync session. Each slot is suspended \xe2\x80\xa6C`Start the refinery and self handshake processes.AiStart the direct session.BjStart accepting inbound socket connectionsA`Starts the task.ClStart the DarkFi daemon in the given executor, using the \xe2\x80\xa6ChStart the Darkfid P2P protocols handler for provided \xe2\x80\xa6ChStart the <code>ProtocolProposal</code> background task.CeStart all <code>ProtocolSync</code> background tasks.CbStart the <code>ProtocolTx</code> background task.CiStart the DarkFi mining daemon in the given executor, \xe2\x80\xa6DcThe <code>sled</code> tree storing the pointers to contracts\xe2\x80\x99 \xe2\x80\xa6AkA wasm store (global state)CjAppend host to a hostlist. Called when initalizing the \xe2\x80\xa6ChA map from leaf indices to leaf data stored as field \xe2\x80\xa6000CiManages persistent storage for blockchain, contracts, \xe2\x80\xa6A`Background tasksDkCurrently active tasks (defined in <code>tasks</code>, started with the \xe2\x80\xa6mToken methodsCmTopic is a hash that you set to remember what the channel \xe2\x80\xa6BiCompute the current metered values total.BfVector containing all forest\xe2\x80\x99s treesnLanguage typesC`Unzips a value containing a tuple of two values.A`Helper utilitiesCcReturns the value of the <code>AssignedCell</code>.AaValue of the coinAhInput\xe2\x80\x99s value (amount)BcWrites a verifying key to a buffer.BaWrites a proving key to a buffer.A`An advice columnAaAn Advice variantCkThis is an advice (witness) column queried at a certain \xe2\x80\xa62AoA column with an index and type0BiMetadata about a column within a circuit.CjThis is a configuration object that stores things like \xe2\x80\xa6CkAllows on-chain programs to implement contract-specific \xe2\x80\xa6AaNative Darkfi PoWAlSetup function of a contractCgA dialer that is able to transparently operate over \xe2\x80\xa6BoAtomic pointer to a <code>Drk</code> structure.BoGet the x coordinate of an elliptic curve pointBoGet the y coordinate of an elliptic curve pointDkStruct handling a <code>EquiXPow</code> instance to generate and verify \xe2\x80\xa6ChThis struct represents a tuple of the form (version, \xe2\x80\xa6BjEnum representing available wallet holdersCkHosts that are currently being inserting into the hostlist.AnStruct representing the daemonChA lookup input did not exist in its corresponding table.CbName of the wasm linear memory in our guest moduleBcMerkle tree chip (using Sinsemilla)BmStructure representing a DarkFi mining daemonAgMonero merge mining PoWAbNumber type value.lNym with TLSAbObject type value.B`Opcodes supported by the zkas VMCgThe output type of this verification strategy after \xe2\x80\xa6BdA contract call\xe2\x80\x99s anonymous outputBcAtomic pointer to the p2p interfaceCkOptional circuit configuration parameters. Requires the \xe2\x80\xa6CeHosts that are migrating from the greylist to the \xe2\x80\xa6CcMetadata about an assigned region within a circuit.BnMain result type used throughout the codebase.AdScalar field elementChScalars modulo the order of this group\xe2\x80\x99s scalar field.AkThis is a scaled polynomiallSOCKS5 proxyAbString type value.lTCP with TLS0CkA P2P message representing a reply for the peer\xe2\x80\x99s DAG \xe2\x80\xa6CkA P2P message representing a request for a peer\xe2\x80\x99s DAG \xe2\x80\xa6lTor with TLSAgUnsigned 32-bit integerAgUnsigned 64-bit integer0AlApply function of a contractAbVerify local filesBcAvailable chips/gadgets in the zkvmC`Wallet instance for a single <code>Holder</code>CfRun the accept loop in a new thread and error if a \xe2\x80\xa6CeAccept function that should run inside a loop for \xe2\x80\xa6BdAppend a new call tree to the forestChAppend provided timestamp and difficulty to the ring \xe2\x80\xa6DiAppend a new child node to the <code>DarkTree</code>, if max capacity \xe2\x80\xa6EfAppend a new <code>DarkTree</code> to the <code>DarkForest</code>, if max capacity \xe2\x80\xa6DkConverts to <code>Any</code> trait. Enables the dynamic modification of \xe2\x80\xa6EkConverts from <code>&amp;mut Value&lt;V&gt;</code> to <code>Value&lt;&amp;mut V&gt;</code>.EcConverts from <code>&amp;Value&lt;V&gt;</code> to <code>Value&lt;&amp;V&gt;</code>.CmBase32 encoding and decoding Base32 encoding as specified \xe2\x80\xa6AlBase64 encoding and decodingnBlocks overlayA`Blocks sled treeoResponse blocksAjRPC block related requestsBhHandles core block-related functionalityCjReturns the Merkle proof branch as a list of Monero hashesDgVector of chunk hashes and a bool which is <code>true</code> if the \xe2\x80\xa60BcClient-side JSON-RPC implementationCcClient API for interaction with this smart contractClClient API for interaction with this smart contract This \xe2\x80\xa6CgClient API for interaction with this smart contract \xe2\x80\xa6FgMaps a <code>Value&lt;&amp;V&gt;</code> to a <code>Value&lt;V&gt;</code> by cloning the contents of \xe2\x80\xa6FhMaps a <code>Value&lt;&amp;mut V&gt;</code> to a <code>Value&lt;V&gt;</code> by cloning the contents \xe2\x80\xa6CaThe column in which this cell should be assigned.0CfThe column in which this permutation is not satisfied.AiCommon internal functionsBdMetering configuration of the queue.AiConfiguration file to useCeConfiguration management across multiple networks \xe2\x80\xa6111FhMaps a <code>Value&lt;&amp;mut V&gt;</code> to a <code>Value&lt;V&gt;</code> by copying the contents \xe2\x80\xa6FgMaps a <code>Value&lt;&amp;V&gt;</code> to a <code>Value&lt;V&gt;</code> by copying the contents of \xe2\x80\xa6AjCrypto-related definitionsCmCalculate cutoff indexes. If buffers have been filled, we \xe2\x80\xa6AoRemove a key from the database.CgOnly update() can call this. Removes a key from the db.BnReads a value by key from the key-value store.CnEveryone can call this. Will read a key from the key-value \xe2\x80\xa6BcSet a value within the transaction.CgOnly update() can call this. Set a value within the \xe2\x80\xa6CgTries to decode a base64 string into a byte vector. \xe2\x80\xa6CgTries to decode a base32 string into a byte vector. \xe2\x80\xa6BeCompute the degree of this polynomialClCompute the degree of the constraint system (the maximum \xe2\x80\xa6CiThis function runs when a smart contract is initially \xe2\x80\xa6AmContract deployment utilitiesBjWallet functionality related to DeployooorDlDerives a <code>ContractId</code> from a <code>SecretKey</code> (deploy key)AeDoubles this element.AkDoubles this field element.111mTarget effortCmEnable this selector at the given offset within the given \xe2\x80\xa6BhEncode a byte slice into a base64 stringCmEncode a byte slice with the given base32 alphabet into a \xe2\x80\xa6Am<code>Money::FeeV1</code> APIDfConvert this JSON value to <code>String</code> value with 2-spaces \xe2\x80\xa6AiZK gadget implementationsAeGet requests receiverChReads a transaction by hash from the transactions store.CiOnly metadata() and exec() can call this. Will return \xe2\x80\xa6BiQueries darkfid for a tx with given hash.AcGet requests senderBmGet the underlying <code>VerifyingKey</code>.nSignals handle00BiThe hasher used to build the Merkle tree.00AdMonero Header fieldslBlock headerAaBlock header datalBlock heightAcBlock height number1BiBlock height the fee was verified againstBjBlock height the call was verified againstBeCanonical(confirmed) tip block heightmHeader height05AiCurrent blockchain heightAlImported WASM host functionsCfInject cached VKs into a given blockchain database \xe2\x80\xa6AgInputs for the proposalAcInputs for the voteA`Anonymous inputs00DhInsert a slice of <code>Block</code> into the overlay\xe2\x80\x99s main tree. \xe2\x80\xa6DbInsert a slice of <code>Block</code> into the store\xe2\x80\x99s main tree.DjInsert a slice of <code>Header</code> into the overlay. The header\xe2\x80\x99s \xe2\x80\xa6DcInsert a slice of <code>Header</code> into the store\xe2\x80\x99s main tree.DhInsert a slice of <code>Transaction</code> into the overlay\xe2\x80\x99s main \xe2\x80\xa6DhInsert a slice of <code>Transaction</code> into the store\xe2\x80\x99s main tree.CjInserts or replaces the bincode for a given ContractId \xe2\x80\xa6CeSafely insert into the HostContainer. Filters the \xe2\x80\xa6CkInsert key-leaf entry into the tree. Returns a new root \xe2\x80\xa6EfInserts <code>GasMetricsKey</code> and <code>GasMetrics</code> pairs into the store\xe2\x80\xa6ChComputes the multiplicative inverse of this element, \xe2\x80\xa6CnInverts this assigned value (taking the inverse of zero to \xe2\x80\xa601DiSet to <code>true</code> if this ChunkedStorage is the representation \xe2\x80\xa6AkReturn <code>is_dir</code>.1BeReturns true iff this element is odd.DeListen on an instantiated <code>Listener</code>. This will open a \xe2\x80\xa6CjDo a lookup of an existing contract state. In order to \xe2\x80\xa60CgLookup algorithm for both nodes lookup and value lookupCnAdd a lookup argument for some input expressions and table \xe2\x80\xa6CiAuxiliary function to calculate the median of a given \xe2\x80\xa6AmVM memory access (read/write)BlGet memory, that needs to have been set fistAnDirect memory access to the VMBhHost functions for merkle tree functionsfMerklenRequest methodAcNotification method0BeCanonical blockchain PoW module stateAhCurrent PoW module stateBjMonero definitions needed for merge miningBeSleep for any number of milliseconds.ClTransmits a payload to a dispatcher. Returns an error if \xe2\x80\xa6CfWakeup peer discovery by sending a notification to \xe2\x80\xa6CmActivate the slots so they can continue with the seedsync \xe2\x80\xa6DgInit peer discovery by sending a notification to <code>init</code>. \xe2\x80\xa6ClSend a notification to the publisher with the given JSON \xe2\x80\xa6CaPublish a message to all listening subscriptions.ChWakeup the waiting task. Subsequent calls to this do \xe2\x80\xa6CmThe offset (relative to the start of the region) at which \xe2\x80\xa60A`Language opcodesAaAnonymous outputsA`Anonymous outputAbRequest parametersAgNotification parametersCmReturns a reference to the parameters that should be used \xe2\x80\xa6nDAO parametersC`Returns the index of the parent, given an index.mParser moduleChObtain a pinned version of this constraint system; a \xe2\x80\xa6ClObtains a pinned representation of this verification key \xe2\x80\xa6AbAttached ZK proofs0BeThe ZK proofs created in this builder0BmParty\xe2\x80\x99s public key for receiving the outputAePut requests receiverAcPut requests senderCnMinimal threshold of participating total tokens needed for \xe2\x80\xa6CiReturns an element chosen uniformly at random using a \xe2\x80\xa6DgGenerate a new <code>Keypair</code> object given a source of randomnessDbGenerate a new <code>SecretKey</code> given a source of randomness2CjReturns an element chosen uniformly at random from the \xe2\x80\xa6BhThe reading half of the transport streamBiThe region in which the failure occurred.CaThe region in which this cell should be assigned.BlThe region in which this gate was activated.CmAttempt to remove an existing contract state. In order to \xe2\x80\xa6ClRemove the given key and its corresponding leaf from the \xe2\x80\xa6hRemoves:CdRenders the given circuit on the given drawing area.CjRemove the last item on a hostlist if it reaches max size.oResponse resultAcCoin\xe2\x80\x99s secret keyCaMessage queue sender, passed to each P2P channel.BgThe generic message smol channel senderAlSender to stop miner threadsBcServer-side JSON-RPC implementationCmUsed to signal to the main running process that it should \xe2\x80\xa6AcSOCKS5 proxy clientClRecent speeds in bytes/sec, used to compute the download \xe2\x80\xa6AeSquares this element.AkSquares this field element.1AgSquare this expression.2AnCurrent status of the resourceBnFlag signalling node has finished initial syncBmFlag signalling DAG has finished initial syncBbFlag indicating the node is syncedAmTarget block time, in secondsAnCast the ringbuffer into a vecDnTransform the struct into a <code>Vec&lt;pallas::Base&gt;</code> ready for \xe2\x80\xa6CcTrace computation of intermediate values in circuitCfFetch block hashes from Electrum nodes, and update \xe2\x80\xa6EgReturns <code>Ok(())</code> if this <code>MockProver</code> is satisfied, or a list \xe2\x80\xa6CbVerify a given message is valid given a signature.CfPerforms a Verify() step for the MiMC-based VDF resultEbVerify a <code>VrfProof</code> given a <code>Publickey</code> and a seed input \xe2\x80\xa6DdCheck a <code>Solution</code> against a particular challenge string.BbWallet database operations handlerBhThe writing half of the transport streamAkBase field element additionBaBase field element multiplicationAnBase field element subtractionBoA type representing length of <code>Bits</code>AcBoolean type value.BnAlready known cutoff end index for this configBnAsync channel for communication between nodes.CmThis is a trait that circuits provide implementations for \xe2\x80\xa6CgCondition variables allow you to block a task while \xe2\x80\xa6ClHosts that are being connected to in Outbound and Manual \xe2\x80\xa6BfStructure representing a DarkFi daemonAdElliptic curve pointCnAuxiliary struct representing the full gas usage breakdown \xe2\x80\xa6CdThese represent the witness types inside the circuitDiKeypair structure holding a <code>SecretKey</code> and its respective \xe2\x80\xa6Ae$\\ell_\\mathsf{value}$BfLiteral types supported by the zkas VMBmModulus of prime field 2^256 - 2^32 * 351 + 1CjModulus of the field written as a string for debugging \xe2\x80\xa6AiGeneric message template.ChRepresents metrics used to capture key statistical data.AdForbidden namespacesmNull event IDAlThis is a negated polynomialBeDefines the network-specific settingsmOpening errorEe<code>OwnCoin</code> is a representation of <code>Coin</code> with its respective \xe2\x80\xa6CfStruct representing the Proof of Work used in a block.BfThis is the product of two polynomialsAeClock sync parametersAfDefine a wasm runtime.B`Success exit code for a contractCgSession trait. Defines methods that are used across \xe2\x80\xa6CkHosts that we have just failed to connect to. Marking a \xe2\x80\xa6AlInverse of $2$ in the field.CkTokenId represents an on-chain identifier for a certain \xe2\x80\xa6CdA value that does not require inversion to evaluate.0EdThe <code>TxStore</code> is a structure representing all <code>sled</code> trees \xe2\x80\xa6BcShort signed u-values for GENERATORBfVarable types supported by the zkas VMChThese represent the witness types outside of the circuitBcShort signed z-values for GENERATORCgReturns true if every seed attempt per slot has failed.ClReturns the relevant socket address for this connection. \xe2\x80\xa6CcVector containing each output value we want to mintBmSize of the listen backlog for listen socketsDbWhen we call <code>stop()</code>, we wait until the process is \xe2\x80\xa6gBitcoinnVec of bucketsCcProving key for the <code>Burn_V1</code> zk circuit00BgThe P2P channel the protocol is servingAmPointer to the connected peerCmAsync channel that handles the sending of messages across \xe2\x80\xa6BkCollects the gates from within the circuit.CkImplements <code>MerkleCRH^Orchard</code> as defined in \xe2\x80\xa6CiCondition variable which allows a task to block until \xe2\x80\xa6CfConnect an instantiated SOCKS5 client to the given \xe2\x80\xa6B`Establish an outbound connectionCfEstablishes a connection to the configured darkfid \xe2\x80\xa6CmEstablishes a connection to the Darkfid node, storing the \xe2\x80\xa6BkReturn a reference to the event\xe2\x80\x99s contentAdContent of the eventAkFetch an event from the DAGChCreate a new database instance for the calling contract.CjCreate a new database instance for the given contract. \xe2\x80\xa6nDecoder moduleCaRepresents the genesis block on current timestampCcRepresents the genesis header on current timestamp.C`Default Keypair used in genesis block generationAfInternal dial function000BbHost function for logging strings.DjCalculates the elapsed time of a <code>Timestamp</code> up to the time \xe2\x80\xa6CkFileSequence containing the list of file paths and file \xe2\x80\xa60CkObtains a point given $(x, y)$, failing if it is not on theBoRetrieve genesis (first) block height and hash.BgRepresents the genesis block difficultyAgGenesis block timestampCmRetrieve all blocks contained in the blockchain in order. \xe2\x80\xa6CkRetrieve all blocks from the store\xe2\x80\x99s main tree in the \xe2\x80\xa6ClRetrieve all headers from the store\xe2\x80\x99s main tree in the \xe2\x80\xa6CmRetrieve all transactions from the store\xe2\x80\x99s main tree in \xe2\x80\xa6CjComputes and returns download ETA in seconds using the \xe2\x80\xa6ClAuxiliary function to calculate the middle value between \xe2\x80\xa6BiGet mutable reference to the inner value.ClFetch given tx hash from the overlay\xe2\x80\x99s main tree. This \xe2\x80\xa6Dj<code>DhtHandler</code> that implements application-specific behaviors \xe2\x80\xa6CjThe generic handler for <code>Transaction</code> messages.oHeaders overlayAaHeaders sled treeA`Response headersmHeader hashes010CbInitialized <code>Holder</code>s for this instanceClThe sequence of bits representing a u64 in little-endian \xe2\x80\xa6CjP2P accept address node listens to for inbound connectionsDfThis method is indented to use the <code>insert()</code> method in \xe2\x80\xa6BfCheck if the inner value is a boolean.BfReturns true iff this element is even.AkCheck whether a URL is IPV6BaCheck if the inner value is null.Aiis_zero comparison gadgetBfReturns true iff this element is zero.0BcPointer to the protocol job managerAhP2P jobs manager pointerCcJSON-RPC primitives JSON-RPC 2.0 object definitionsA`JSON-RPC version000AbFun police go awayAcMain holder keypairBfKeypairs, secret keys, and public keysCnGet length of the longest common prefix bits for the given \xe2\x80\xa6Bc<code>Deployooor::LockV1</code> APIAmMainnet network configurationCjMeasures a circuit with parameter constant <code>k</code>.B`Valid pending transaction hashesmError messageCeDefines how to decode generic messages as well as \xe2\x80\xa6ChStores, manages, and provides access to explorer metricsBiMetrics used to store explorer statisticsCcProving key for the <code>Mint_V1</code> zk circuit0000CiProving key for the <code>TokenMint_V1</code> zk circuit,BcThe P2P channel message subcriptionBmExplorer network (localnet, testnet, mainnet)AfCurrent active networkDdDisable synchronization and connections to <code>darkfid</code>, \xe2\x80\xa6CfOnly used for debugging. Compromises privacy when set.CeOnly used for debugging, compromises privacy when set1ChObject store for transferring memory from the host to VMAaAnonymous outputs000DgMain <code>sled_overlay::SledDbOverlay</code> to the sled db connectionBgOverlay cache over canonical BlockchainClPointer to the overlay used for accessing and performing \xe2\x80\xa60AmParent nodes in the event DAGAcTransaction payloadDiThe <code>sled</code> tree storing all the node pending transactions, \xe2\x80\xa6BfInstance column used for public inputsCmObtains an MSM from the verifier strategy and yields back \xe2\x80\xa6BhProvides core structs for DAO::propose()CiStart receiving messages. Sender also provides with a \xe2\x80\xa6A`Receive message.CfDelete items from a hostlist that are older than a \xe2\x80\xa6DfThis method is intended to use the <code>remove()</code> method in \xe2\x80\xa6CnSend a given JSON-RPC request over the instantiated client \xe2\x80\xa60CfSends a request to the client\xe2\x80\x99s Darkfid JSON-RPC \xe2\x80\xa6BhSelect a new <code>RuntimeOption</code>.AhSchnorr signature traitsChSenders mapped by channel ID to propagate the action \xe2\x80\xa6ClCore logic for block synchronization, chain data access, \xe2\x80\xa6AiExplorer service instanceCjDefines the interaction between nodes during a connection.BbWeak pointer to respective sessionAmWeak pointer to parent object0AkWeak pointer to the sessionCfShuffle a slice using <em>Fisher-Yates</em> algorithm.CaReturns the index of the sibling, given an index.BfMain pointer to the sled db connection0DhThe main <code>sled</code> database connection used for data storage \xe2\x80\xa6CmPointer to the underlying sled database used by the store \xe2\x80\xa60BlA boolean marking if this channel is stoppedDj<code>Money::OtcSwapV1</code> API This API is crufty. Please rework it \xe2\x80\xa6CdUsed so we can keep StoppableTask in HashMap/HashSetBcTermination signal channel receiver00AmTestnet network configurationBbPoW miner number of threads to useAbTimeout in secondsCfAwaits a future or times out after a duration of time.AmAsync timeout implementationsClConverts an element of the prime field into the standard \xe2\x80\xa6CmInternal function to deserialize data into a message type \xe2\x80\xa6CjThe hash for this transaction the runtime is being run \xe2\x80\xa6BoThe transaction hash where the DAO was deployedCdThe transaction hash where the proposal was deployedBkTransaction hash where this vote was castedAiRetrieve stored txs countC`Return the session bit flag for the session typeB`Constructs an unwitnessed value.BgThe dialer variant (transport protocol)BiThe listener variant (transport protocol)BcIncrease verbosity (-vvv supported)00000mBlock versionCcIdentifies protocol version being used by the node.CmThe version message of the node we are connected to. Some \xe2\x80\xa62AiSupported network versionCnVM heap variable definitions and utility functions VM heap \xe2\x80\xa6BdAdvice column used to witness valuesBaCreate inbound socket connectionsBlA value assigned to a cell within a circuit.0CfRing buffer length. Must be == DIFFICULTY_WINDOW + \xe2\x80\xa6CnHow many bits of information can be reliably stored in the \xe2\x80\xa6B`CURVE_ID used for hash-to-curve.Dd<code>crate::RuntimeOption::CompileOnly</code> is in use and the \xe2\x80\xa6AmThis is a constant polynomialB`The projective form of the curveCnThis trait is a common interface for dealing with elements \xe2\x80\xa6C`A <code>DaoBulla</code> represented in the stateDhStruct representing the information hold by a <code>DarkTreeLeaf</code>.CgThis struct represents a DFS post-order traversal Tree.DjRepresents a UTC <code>DateTime</code> with individual fields for date \xe2\x80\xa6BhInternal wasm runtime API for sled treesCiA P2P message representing publishing an event on the \xe2\x80\xa6BiA P2P message representing an event replyBkA P2P message representing an event requestDjSize of fixed length byte-array from a <code>Hasher</code>. Equivalent \xe2\x80\xa6AnHeap types in bincode &amp; vmAnAtomic pointer to hosts objectAkA location inside a region.AcAn Instance variantCnThis is an instance (external) column queried at a certain \xe2\x80\xa6AbAn instance columnCizkas language builtin keywords. These can not be used \xe2\x80\xa6CgA layout strategy within a circuit. The layouter is \xe2\x80\xa6Bc253 bit <code>a &lt; b</code> checkChA listener that is able to transparently listen over \xe2\x80\xa6hMetadataBeA structure for <code>monotree</code>ClHow many bits are needed to represent an element of this \xe2\x80\xa6ChUpdate these if any circuits are changed. Delete the \xe2\x80\xa6B`Algorithm personalization stringAbPoseidon hash chipCeThis struct represents a block proposal, used for \xe2\x80\xa6AoWrapper trait for async streamsCmMax items to use for next difficulty calculation. Must be \xe2\x80\xa6CjThe key to be used to restore the latest <code>root</code>CgA value stored as a fraction to enable batch inversion.0CiStructure representing the current state of a file or \xe2\x80\xa6BjSend provided response message to the nodeCmCustom RPC errors available for darkfid. Please sort them \xe2\x80\xa6ClCustom RPC errors available for minerd. Please sort them \xe2\x80\xa6AjThis is a virtual selectorCmA selector, representing a fixed boolean value per row of \xe2\x80\xa6ClP2P network settings. The scope of this is a P2P network \xe2\x80\xa6BePotential solution to an EquiX puzzleAlTree only used for printing.Abzkvm configurationiVRF ProofCgStructure representing base wallet database operations.AcZero-Cond selectionClA ZkBinary decoded from compiled zkas code. This is used \xe2\x80\xa6CkConfiguration parameters for the circuit. Defines which \xe2\x80\xa6CnHandles the acceptance of inbound socket connections. Used \xe2\x80\xa6B`Add a node in the correct bucketoAnalyzer moduleEhReturns <code>Value::unknown()</code> if the value is <code>Value::unknown()</code>, \xe2\x80\xa6FdAdd <code>value</code> to our hash table and send <code>message</code> for a <code>key</code> to \xe2\x80\xa6BeBase directory for filesystem storageBjThe index for this call in the transactionCmReturn the list of all connected channels, including seed \xe2\x80\xa6CfVector containing all tree\xe2\x80\x99s branches(children tree)AeCLI utility functionsoCompiler moduleCkCheck if the store\xe2\x80\x99s main tree contains a given block \xe2\x80\xa6ClCheck if the store\xe2\x80\x99s main tree contains a given header \xe2\x80\xa6CeCheck if the store\xe2\x80\x99s main tree contains a given \xe2\x80\xa6AnCheck if host is in a hostlistCkReturns true if the buffer contains an element equal to \xe2\x80\xa6DiChecks if provided <code>GasMetricsKey</code> exists in the store\xe2\x80\x99s \xe2\x80\xa6BaSync the DAG from connected peersBd<code>Dao::Exec</code> functionalityCkList DAO(s) imported in the wallet. If a name is given, \xe2\x80\xa6Bd<code>Dao::Mint</code> functionalityEhCreate a <code>Dao::Mint</code> transaction with the given <code>Dao</code> info and \xe2\x80\xa6AdMint a DAO on-chain.Bd<code>Dao::Vote</code> functionalityBlCreate a <code>Dao::Vote</code> transaction.AfVote on a DAO proposalBbPath to the explorer\xe2\x80\x99s database.DbGet the distance between <code>key_1</code> and <code>key_2</code>A`Download methodsAhVarious encoding formatsCfReturn a reference to the <code>Dialer</code> endpointDhShould only be called after <code>listen()</code> in order to behave \xe2\x80\xa6AjThe endpoint to connect toBcThe address to open the listener onCiEndpoint of the DarkFi node JSON-RPC server to sync with.Aefud JSON-RPC endpointAaJSON-RPC endpointCjEvaluates this value directly, performing an unbatched \xe2\x80\xa6CdEvaluates this assigned cell\xe2\x80\x99s value directly, \xe2\x80\xa6CiEvaluates this assigned value directly, performing an \xe2\x80\xa6CjEvaluate the polynomial using the provided closures to \xe2\x80\xa6CnThis function executes a given SQL query, but isn\xe2\x80\x99t able \xe2\x80\xa6BgGlobal multithreaded executor referenceAmReference the global executor1CmA asynchronous executor used to create an RPC client when \xe2\x80\xa62ChList of features consisting of a tuple of (services, \xe2\x80\xa6BlFinalizes the batch and checks its validity.AlOptional fork tip block hashDiTries to create a <code>BaseBlind</code> object from a base58 encoded \xe2\x80\xa6DkTries to create a <code>ScalarBlind</code> object from a base58 encoded \xe2\x80\xa6DiTries to create a <code>SecretKey</code> object from a base58 encoded \xe2\x80\xa6DiTries to create a <code>PublicKey</code> object from a base58 encoded \xe2\x80\xa6DhTries to decode a base58 string into a <code>MerkleNode</code> type. \xe2\x80\xa6BcFunction ID definitions and methodsCiCalculate the remaining gas using wasm\xe2\x80\x99s concept of \xe2\x80\xa6BeFetch all known DAOs from the wallet.ClFetch the last block hash in the overlay\xe2\x80\x99s order tree, \xe2\x80\xa6CmFetch the last block hash in the order tree, based on the \xe2\x80\xa6BlFetches the most recent gas metrics from \xe2\x80\xa6DfFetches the most recent <code>GasMetrics</code> and its associated \xe2\x80\xa6CjFast lookup for leaf. The SMT can be used as a generic \xe2\x80\xa6CiGets the \xe2\x80\x9croot\xe2\x80\x9d of this assignment, bypassing the \xe2\x80\xa6DjTriggered when calling the <code>fud.get()</code> method. It creates a \xe2\x80\xa6DeAbstraction function for fetching a <code>ZkBinary</code> and its \xe2\x80\xa60DjReturns the path to the user\xe2\x80\x99s home directory. Use <code>$HOME</code>\xe2\x80\xa60AeHostlist storage pathAfHosts .tsv file to useA`Path to hostlistAnReturns the additive identity.CgReturns the additive identity, also known as the \xe2\x80\x9c\xe2\x80\xa6AlParent <code>Instance</code>oA wasm instanceBeCheck if the inner value is an array.BgCheck if blockchain contains any blocks0CeCheck if overlay\xe2\x80\x99s order tree contains any records.CcCheck if store\xe2\x80\x99s order tree contains any records.BjCheck if the store\xe2\x80\x99s main tree is empty.CoReturn <code>true</code> if the chunked file contains no chunk.DkReturn <code>true</code> if the <code>FileSequence</code> contains no file.AmCheck if a hostlist is empty.C`Returns true if buffer is empty, false otherwiseBlChecks if there is contract metadata stored.BkChecks if there are any gas metrics stored.Ajis_equal comparison gadgetChReturn an mutable iterator over the chunks and their \xe2\x80\xa6CjMutably iterate through the tree, using DFS post-order \xe2\x80\xa6BkRetrieve store\xe2\x80\x99s sync tree records count.AoLoad the hostlists from a file.AdAllow localnet hostsCkIf this is true, strictly follow the gold_connect_count andAkLocal network configurationAeEnable localnet hostsDiThe <code>sled</code> tree storing the location of the blockchain\xe2\x80\x99s \xe2\x80\xa6CgThe location at which this constraint is not satisfied.CbThe location at which the lookup is not satisfied.CgThe location at which the permutation is not satisfied.CnThis function runs first in the entire scheme of executing \xe2\x80\xa6AhMetadata about circuits.AmMetering related definitions.lMiMC VDF \xe2\x80\xa6ClPerforms transport mixing for an url returning a list of \xe2\x80\xa6BlNative (non-wasm, non-ff) Sparse Merkle TreeA`Spawned networksEeCreate a <code>Money::OtcSwap</code> transaction with two given <code>Holder</code>s.C`Our own DAOs with their proposals and votes keysAmPedersen commitment utilitiesAhBlock Proof of Work type0AcPrevious block hash0BkThe on chain representation of the proposalCaBulla identifier of the proposal this vote is forCkDefines the networking protocol used at each stage in a \xe2\x80\xa6CiTriggered when calling the <code>fud.put()</code> method.CnMessage queue receiver listening for new messages from all \xe2\x80\xa6BcAction signal smol channel receiverCfTask that periodically checks entries in the greylist.Al<code>add_protocol()?</code>CeA registry that tracks hosts and their current state.CfThe channel used to read the JSON-RPC response object.CeThe channel used to read the JSON-RPC response objectDkThe channel used to send JSON-RPC request objects. The <code>bool</code>\xe2\x80\xa6CaThe channel used to send JSON-RPC request objectsAcResource definitionAhJSON-RPC background task0AlSave the hostlist to a file.CmAllocate a new (simple) selector. Simple selectors cannot \xe2\x80\xa6lDHT settingsCdReturn an atomic pointer to the set network settingsAdP2P network settingsBbPointer to configured P2P settingslP2P settingsAaJSON-RPC settingsCmNetwork configuration settings. This holds the configured \xe2\x80\xa6AaSettings and argsCaPoW settings which includes BTC/Electrum settingsCiEquivalent to <code>Self::sqrt_ratio(self, one())</code>.0AaAdd new timestampCeWrites a verifying key to a vector of bytes using \xe2\x80\xa6DkWrites a proving key to a vector of bytes using <code>Self::write</code>\xe2\x80\xa6ChConvert the <code>DaoBulla</code> type into 32 raw bytes0CdConvert the <code>Coin</code> type into 32 raw bytesCiConvert the <code>Nullifier</code> type into 32 raw bytesCgConvert the <code>TokenId</code> type into 32 raw bytesBgSerialize <code>Bits</code> into bytes.BgSerialize <code>Node</code> into bytes.DmDowncast the <code>PublicKey</code> to 32 bytes of <code>pallas::Point</code>DcConvert a <code>ContractId</code> object to its byte representationCfConvert the <code>FuncId</code> type into 32 raw bytesCjConvert the <code>MerkleNode</code> type into 32 raw bytesCgReturn the packed byte representation of this Solution.CbConverts this element to its curve representation.CfReturns the field element corresponding to this value.AdToken ID of the coinAbInput\xe2\x80\x99s token IDB`Token ID definitions and methodsChGenerate a toml string containing the DAO configuration.CbCreate a <code>Money::Transfer</code> transaction.oPayment methodsCiCreate a payment transaction. Returns the transaction \xe2\x80\xa6E`Converts <code>JsonResult</code> to <code>JsonResponse</code>, returning the \xe2\x80\xa6EfConverts <code>JsonResult</code> to <code>JsonError</code>, returning the response \xe2\x80\xa6BlTransactions related storage implementationsCjFully validate an event for the correct layout against \xe2\x80\xa6BbWallet database operations handlerBoGas used across all executed wasm transactions.DgWrite this JSON value to the given <code>io::Write</code> object as \xe2\x80\xa6AoThe affine version of the curveoArithmetic ChipAiBan policies definitions.AhBase field element arrayBgStructure representing full block data.mBoolean checkCjCheck if a field element fits in a boolean (Either 0 or 1)AoBroadcast message to rest nodesC`Already known cutoff start index for this configAbA challenge stringBoHosts that have been successfully connected to.BbCreate outbound socket connectionsCjThis struct represents the information required by the \xe2\x80\xa6BnPath prefix where directory metadata is storedBoParameters representing a DAO to be initializedClStructure representing a <code>DAO_DAOS_TABLE</code> record.CgElliptic curve multiplication with a Base field elementB`Elliptic curve nonidentity pointDkJSON-RPC error codes. The error codes <code>[-32768, -32000]</code> are \xe2\x80\xa6CgDefines a daemon structure responsible for handling \xe2\x80\xa6EaThe values of the DHT are <code>Vec&lt;FudSeeder&gt;</code>, mapping resource \xe2\x80\xa6CkGas limit for a single contract call (Single WASM instance)CiGenerator used in SinsemillaCommit randomness for IVK \xe2\x80\xa6CjGenerator used in SinsemillaCommit randomness for note \xe2\x80\xa6CiThe value commitment is used to check balance between \xe2\x80\xa600CfErrors that could occur while building a hash functionClHostState is a set of mutually exclusive states that can \xe2\x80\xa6CbExtra methods for Iterator. Copied from itertools.AgA JSON-RPC error objectCmEnum to represent one JSON value. Each variant represents \xe2\x80\xa6CiMessage bytes vector length limit. Set to 0 for no limit.BkStructure representing a DarkFi mining nodeBjAtomic pointer to the DarkFi mining daemonDi<code>MoneyNote</code> holds the inner attributes of a <code>Coin</code>.CfLength of the nonce value generated by clients and \xe2\x80\xa6CjNumber of bytes in the packed representation of a solutionCgNumber of items (selected hash inputs) in each solutionDbThe <code>Nullifier</code> is represented as a base field element.AiNym Dialer implementationCnThis struct represents the information required by the PoW \xe2\x80\xa6CdThe size of a Halo 2 proof, broken down into its \xe2\x80\xa6DiStructure holding a public key, wrapping a <code>pallas::Point</code> \xe2\x80\xa6BkSimple broadcast (publish-subscribe) class.CkJSON-RPC client implementation using asynchronous channels.BhThe scalar field of this elliptic curve.0CkAuxiliary structure holding various in memory caches to \xe2\x80\xa6DhStructure holding a secret key, wrapping a <code>pallas::Base</code> \xe2\x80\xa6BlSchnorr signature with a commit and responseAeSOCKS5 proxy with TLSCkThis is an error that can occur during synthesis of the \xe2\x80\xa6AiTCP Dialer implementationBnWrapper struct to represent system timestamps.AiTor Dialer implementationBoThis struct represents a DarkFi validator node.ClReturn an error if the current Env section is not in the \xe2\x80\xa6BmCreate an alias record for provided Token ID.DjInsert a given <code>BlockInfo</code> into the overlay. This functions \xe2\x80\xa6DgInsert a given <code>BlockInfo</code> into the blockchain database. \xe2\x80\xa6AjAdds a proof to the batch.AmAdd a value to our hash tableBaFetch all pukeys from the wallet.BbAggregate a vote with existing oneCjAppend a transaction to the block. Also adds it to the \xe2\x80\xa6CiThe node retrieves a transaction, validates its state \xe2\x80\xa6CmReturn a tuple of vectors of types that are accepted by a \xe2\x80\xa6CkNodes to avoid interacting with for the duration of the \xe2\x80\xa60BkLookup our own node id to bootstrap our DHTCjBroadcasts a message concurrently across all active peers.DeBuild the <code>DarkTree</code> using .build() and then produce a \xe2\x80\xa6DgBuild each individual <code>DarkTree</code> using .build() and then \xe2\x80\xa6CjSled tree for storing gas metrics by height, utilizing \xe2\x80\xa6AeThe Equi-X challenge.BfThe next <code>Challenge</code> to tryCdConfigure the Arithmetic chip with the given columnsAcConfigure the chip.CmThe circuit is given an opportunity to describe the exact \xe2\x80\xa6CcChecks if there is an active connection to Darkfid.CiHandles the creation of outbound connections. Used to \xe2\x80\xa6AgDarkFi consensus moduleBmHot/Live data used by the consensus algorithmiConstantsAgCryptographic constantsBaHostlists and associated methods.A`Contract overlayAlContracts related sled treesBkRPC handlers for contract-related perationsBlImplements functionality for smart contractsBoThe current value of <code>k</code> being used.CjAtomically prune the DAG and insert the given event as \xe2\x80\xa6mThe DAO bullaAbRevealed DAO bullaCaWitnessed leaf positions of DAO bullas in the \xe2\x80\xa6AcDarkTree structuresAaReplay logs path.AePath to P2P datastoreCnLookup a database handle from its name. If it exists, push \xe2\x80\xa6CmEveryone can call this. Assumes that the database already \xe2\x80\xa6CkThis is the main chip function. Attempts to witness the \xe2\x80\xa6BiSerialized deployment payload instructionBe<code>Deployooor::DeployV1</code> APIBhNumber of DHT lookup requests in a burstCmPath to the filesystem directory where directory metadata \xe2\x80\xa6Ba<code>dnet</code> background taskAhInternal listen function00CgEvent publisher, this notifies whenever an event is \xe2\x80\xa6BeReturn all known hosts on a hostlist.DgWrite this JSON value to the given <code>io::Write</code> object as \xe2\x80\xa6ChConverts from pallas::Base to pallas::Scalar (aka $x \xe2\x80\xa6BiVarious <code>From</code> implementationsCmTakes each element in the <code>Iterator</code>: if it is \xe2\x80\xa6ChAttempts to convert a byte representation of a field \xe2\x80\xa6D`Obtains a field element congruent to the integer <code>v</code>.BnReturns a fixed generator of unknown exponent.CfReturns a fixed generator of the prime-order subgroup.CmFetch a single chunk from Geode. Returns a Vec containing \xe2\x80\xa6CkFetch all coins and their metadata related to the Money \xe2\x80\xa6CfReturn the list of files from the <code>reader</code>.AjReturn <code>files</code>.CnFetch the first block hash in the order tree, based on the \xe2\x80\xa6AnReturn <code>self.gates</code>ClFetch given heights from the overlay\xe2\x80\x99s order tree. The \xe2\x80\xa6CjFetch given heights from the store\xe2\x80\x99s order tree. The \xe2\x80\xa6CnRetrieve token by provided string. Input string represents \xe2\x80\xa6DhCheck if the given <code>BlockInfo</code> is in the database and all \xe2\x80\xa60BlHashes a verification key into a transcript.oBlock hash rankCnThe sequence of K bits in little-endian order representing \xe2\x80\xa6BkInitialize the first half of an atomic swapBeCheck if the inner value is a number.BfCheck if the inner value is an object.ClIs this selector \xe2\x80\x9csimple\xe2\x80\x9d? Simple selectors can only \xe2\x80\xa6BeCheck if the inner value is a string.CiCreate a full transaction by inspecting and verifying \xe2\x80\xa6EgGenerate a <code>ProvingKey</code> from a <code>VerifyingKey</code> and an instance \xe2\x80\xa6DnGenerate a <code>VerifyingKey</code> from an instance of <code>Circuit</code>.CjField-native less than comparison gadget with a lookup \xe2\x80\xa6AhLookup requests receiverAfLookup requests senderBe<code>Money::Fee</code> functionalityDjThe <code>sled</code> tree storing the Sparse Merkle Tree of the Money \xe2\x80\xa6ChThe Money Sparse Merkle tree containing coins nullifiersCiA single function for moving hosts between hostlists. \xe2\x80\xa6AaNumber of bucketsAhEnters into a namespace.CmGenerate an empty block for provided Header. Transactions \xe2\x80\xa6BgOur own <code>VerifiableNodeData</code>CoDerive the <code>Nullifier</code> for this <code>OwnCoin</code>AcInput\xe2\x80\x99s NullifierAbRevealed nullifier0AeNullifier definitionsAfReturns the numerator.BiOpen the file at <code>file_index</code>.CnAuxiliary function to parse db_get return value. If either \xe2\x80\xa6CkSled tree containing \xe2\x80\x9cresource hash -&gt; path on the \xe2\x80\xa6AmFork proposal hashes sequenceBn<code>ProtocolProposal</code> messages handlerAgResponse fork proposalsAbResponse proposalsAfNotification publisherBjSimple broadcast (publish-subscribe) classDhAdds the provided <code>BlockInfo</code> to the block explorer database.BkCurrently active put tasks (running the \xe2\x80\xa6BjQuery an Any column at a relative positionAcCreate a random ID.CnOptional recipient\xe2\x80\x99s public key, in case we want to mint \xe2\x80\xa60CnCheck whether a peer is available to be refined currently. \xe2\x80\xa6CaResources (current status of all downloads/seeds)BgSet <code>DarkTreeLeaf</code>\xe2\x80\x99s indexClSign given swap transaction by retrieving the secret key \xe2\x80\xa6AhBlock producer signature00CeConvert this JSON value to <code>String</code> value.BeConvert the object into a JSON string000CkSubscribe to a channel. Assigns a new ID and adds it to \xe2\x80\xa6DhSubscribes to a <code>Message</code>. Using the Message name, the methodBaStart receiving network messages.CgListen instantiated client for notifications. NOTE: \xe2\x80\xa6ClMake sure you call this method early in your setup. That \xe2\x80\xa6BgReturns the list of suspended channels.Cjasync task used for block syncing. A checkpoint can be \xe2\x80\xa6CnDefines the threshold after which rate limit kicks in. Set \xe2\x80\xa6AhBlock creation timestamp0CfUNIX timestamp of when the VersionMessage was created.BgTimestamp of the event in whole secondsBcThe time the metrics was calculated3BgTime transaction was added to the blockDiWhen this <code>FudSeeder</code> was added to our hash table. This is \xe2\x80\xa6CeConverts this element into its affine representation.CeOverall gas consumed metrics across all transactions.AmBlockchain total transactionsCjNetwork transports, holds implementations of pluggable \xe2\x80\xa6AmTree hash algorithm in MoneroCmRepresents the total count of transactions tracked by the \xe2\x80\xa6CiArbitrary data provided by the user. We don\xe2\x80\x99t use this.CeUser data used by protocol when spend hook is enabledBgOptional user data to use in the output0BjHolder\xe2\x80\x99s <code>Validator</code> instanceAgValidator(node) pointerCjConditional selection based on lhs (will output lhs if \xe2\x80\xa6CbThe affine representation for this elliptic curve.AjBase field arithmetic chipDfThis trait allows a <code>Circuit</code> to direct some backend to \xe2\x80\xa6CgAuxiliary structure used to keep track of blocks order.CkAuxiliary structure used to keep track of block ranking \xe2\x80\xa6EgThe <code>BlockStore</code> is a structure representing all <code>sled</code> trees \xe2\x80\xa6ClStructure holding all sled trees that define the concept \xe2\x80\xa6AoAtomic pointer to async channelAoA contract call\xe2\x80\x99s clear inputmA column typeAeConditional selectionCnConditionally select between two base field elements given \xe2\x80\xa6ChMetadata about a configured constraint within a circuit.BdAn individual polynomial constraint.CnContractId represents an on-chain identifier for a certain \xe2\x80\xa6DkThis struct represents a Forest of <code>DarkTree</code>. It is advised \xe2\x80\xa6BdStructure representing a DarkFi nodeBcAtomic pointer to the DarkFi daemonCcDebug a variable\xe2\x80\x99s value in the ZK circuit table.D`Trait for application-specific behaviors over a <code>Dht</code>AiStandard Base32 alphabet.CnElliptic curve multiplication with a Base field element of \xe2\x80\xa6AgAn Event Graph instanceDkRepresents the explorer database backed by a <code>sled</code> database \xe2\x80\xa6ClLow-degree expression representing an identity that must \xe2\x80\xa6BiPath prefix where file metadata is storedCdQuery of fixed column at a certain relative locationCnStructure for managing gas metrics across all transactions \xe2\x80\xa6kID mismatchChWrapping enum around the available JSON-RPC object typesBiMaximum allowed namespace length in bytesBcDistinguishes distinct P2P networksDcThe <code>MerkleNode</code> is represented as a base field element.A`Merkle tree pathCmCalculate Merkle root, given a position, Merkle path, and \xe2\x80\xa6BeA test prover for debugging circuits.CkNullifierK is used in scalar mul with a base field element.CnInvalid JSON was received by the server. An error occurred \xe2\x80\xa6CgThis represents an element of a non-binary prime field.CjThis is a proving key which allows for the creation of \xe2\x80\xa6BaWrapper trait for async listenersClRange check a Base field element, given bit-width (up to \xe2\x80\xa6AoA ring buffer of fixed capacityoSinsemilla chipBcSparse merkle tree (using Poseidon)CdSubscriber is a special object that yields a channelBoA static for <code>TorClient</code> reusabilityBdAn error relating to a lookup table.CiThis is an error that could occur during table synthesis.CkStructure represening a request to ask a node for their \xe2\x80\xa6A`Transcript errorCfAlways try the compiler first but fall back to the \xe2\x80\xa6AjUnix Dialer implementationCaAttempt to assign a used <code>TableColumn</code>CgPrefix domain used for <code>hash_to_curve</code> callsCmStructure representing a <code>DAO_VOTES_TABLE</code> record.CkAppend a vector of transactions to the block. Also adds \xe2\x80\xa6AlBase field arithmetic gadgetCdCreate and attach the fee call to given transaction.CnDo not ban nodes that send messages without dispatchers if \xe2\x80\xa60AeCreate bench.csv fileClCompute a block\xe2\x80\x99s rank, assuming that its valid, based \xe2\x80\xa6AiBlockchain overlay accessB`Canonical (confirmed) blockchain00AeBlockchain structuresCfLocal copy of the Darkfi blockchain used for block \xe2\x80\xa6Bj<code>Burn_V1</code> zkas circuit ZkBinary00BkBuild a <code>PathBuf</code> to a cachefileCgThe call index in the transaction where the DAO was \xe2\x80\xa6ClThe call index in the transaction where the proposal was \xe2\x80\xa6ChCall index in the transaction where this vote was castedCeCheckpoint overlay so we can revert to it, if needed.BkClock sync utility module Clock sync moduleoCoin attributesAlBlinding factor for the coinCfAuxiliary function to define the interactive shell \xe2\x80\xa6EhReturns <code>$XDG_CONFIG_HOME</code>, <code>$HOME/.config</code>, or <code>None</code>.C`The polynomial constraint that is not satisfied.0CnAtomically insert given events into the DAG and return the \xe2\x80\xa6BcThe DAO signature(notes) public keyCgCalculate the number of days since a given midnight \xe2\x80\xa6C`Overlay tree handles used with <code>db_*</code>AlDecode hex string into bytesAfEnable graph debuggingBjSend a deg notification over the publisherAaHeight difficultyDhThe <code>sled</code> tree storing the difficulty information of the \xe2\x80\xa6BfFlag indicating if its early executionBeEntrypoint used for the wasm binariesCh<code>MessageSubscriber</code> for <code>EventPut</code>Ch<code>MessageSubscriber</code> for <code>EventRep</code>Ch<code>MessageSubscriber</code> for <code>EventReq</code>BeGet the oldest entry from a hostlist.CkPath to the filesystem directory where file metadata is \xe2\x80\xa6DhSend FIND NODES request to a peer to get nodes close to <code>key</code>CkSend FIND VALUE request to a peer to get a value and/or \xe2\x80\xa6ChReads a verification key from a slice of bytes using \xe2\x80\xa6DhReads a proving key from a slice of bytes using <code>Self::read</code>.DkCreate a <code>DaoBulla</code> object from given bytes, erroring if the \xe2\x80\xa60DgCreate a <code>Coin</code> object from given bytes, erroring if the \xe2\x80\xa6CgCreate a <code>Nullifier</code> object from given bytesDjCreate a <code>TokenId</code> object from given bytes, erroring if the \xe2\x80\xa6DbConstruct <code>Bits</code> instance by deserializing bytes slice.CiConstruct <code>Node</code> by deserializing bytes slice.DiInstantiate a <code>SecretKey</code> given 32 bytes. Returns an error \xe2\x80\xa6DiInstantiate a <code>PublicKey</code> given 32 bytes. Returns an error \xe2\x80\xa6CiCreate a <code>ContractId</code> object from given bytes.DiCreate a <code>FuncId</code> object from given bytes, erroring if the \xe2\x80\xa6DiTry to create a <code>MerkleNode</code> type from the given 32 bytes. \xe2\x80\xa6CcAuxiliary function to create a full clone using \xe2\x80\xa60ClFetch n hashes before given height. In the iteration, if \xe2\x80\xa6BiFetch all known blocks from the database.AkReturn <code>chunks</code>.CaGet the underlying <code>EvaluationDomain</code>.DbRetrieve last \xe2\x80\x98N\xe2\x80\x99 <code>BlockInfo</code>s from the blockchain.BjFetch the last N blocks from the database.CgQueries darkfid for given transaction\xe2\x80\x99s required fee.CfAuxiliary function to define the dao command handling.CfAuxiliary function to define the otc command handling.CgCheck if block order for the given height is in the \xe2\x80\xa6ChOur local hash table, storing a part of the full DHT \xe2\x80\xa6CjImport given DAO params into the wallet with a given name.CfReturns the field element corresponding to this value.CkAwaits an I/O future or times out after a duration of time.AmRetrieve the last block info.0BgFetch the last block from the database.AnBlockchains\xe2\x80\x99 last block hashCdReturns the index of the left child, given an index.ClAdds data to merkle tree. The tree, database connection, \xe2\x80\xa6CmAdd given elements into a Merkle tree. Used for inclusion \xe2\x80\xa6CjMine provided block, based on provided PoW module next \xe2\x80\xa6BoMine provided block, based on next mine target.CfAsync task used for participating in the PoW block \xe2\x80\xa6ClCreate a token mint transaction. Returns the transaction \xe2\x80\xa6Bj<code>Mint_V1</code> zkas circuit ZkBinary0000Bo<code>TokenMint_V1</code> zkas circuit ZkBinaryBfThe Money Merkle tree containing coinsCeCreate a new <code>dht::FudSeeder</code> for own nodeAcRevealed nullifiersAeVote input nullifiersAoOur own tokens to track freezesCdProvides optional <code>p2p.get_info()</code> methodCkIf the port number specified is 0, then replace it with \xe2\x80\xa6EcCreate a <code>Money::PoWReward</code> transaction for a given <code>Holder</code>.AoCurrently configured PoW targetAnPrints the wasm contract logs.ClReturns the proof size for the given number of instances \xe2\x80\xa6A`DAG Pruning TaskCjPublic key used to sign the transaction and derive the \xe2\x80\xa60DgRead the file at <code>file_path</code> to get its chunk with index \xe2\x80\xa6BcReset confirmed DAOs in the wallet.AjRing Buffer implementationCgJSON-RPC client to execute requests to the miner daemonCeJSON-RPC client to execute requests to darkfid daemonChJSON-RPC client used to communicate with the Darkfid \xe2\x80\xa6AiRPC server listen addressDi<code>scan_block</code> will go over over transactions in a block and \xe2\x80\xa6DgAuxiliary function to generate a new <code>ScanCache</code> for the \xe2\x80\xa6CkSled tree containing scraps which are chunks containing \xe2\x80\xa6ClOur secret key (the public key is in <code>node_data</code>)BoSIGHUP publisher to retrieve new configuration,00AkAttached Schnorr signaturesmSignature feeAeSinsemilla generatorsCcSleep time for each unit over the threshold, in \xe2\x80\xa6CnCompute sleep time for current metered values total, based \xe2\x80\xa6ChInserts given slice to the wallets nullifiers Sparse \xe2\x80\xa6AmSorts files by their PathBuf.CkSpend hook used for protocol-owned liquidity. Specifies \xe2\x80\xa6CaOptional contract spend hook to use in the output0iComputes:0CiContracts states Monotree(SMT) root this block commits to0CbRPC handlers for blockchain statistics and metricsCdPowers metrics gathering and analytical capabilitiesBkReturn the combined file size of all files.DaGiven the provided <code>cs</code>, synthesize the given circuit.DcGiven the provided <code>cs</code>, synthesize the circuit. The \xe2\x80\xa6BbLatest block timestamps ringbufferBnBuiltin return values occupy the upper 32 bitsCgMint an arbitrary token for a given recipient using \xe2\x80\xa6AoPreferred addresses transports.CjMark as host as Free which frees it up for most future \xe2\x80\xa6BlThe value of the party\xe2\x80\x99s output to receiveBoThe value of the party\xe2\x80\x99s input to swap (send)CgSets the view width for this layout, as a number of \xe2\x80\xa6BcMain WASM VM runtime implementationAjAtomic pointer to AcceptorCeQuery of advice column at a certain relative locationBeConfiguration for the Arithmetic ChipBfStructure representing a block record.AbChannel debug infoCjMeasures a circuit to determine its costs, and explain \xe2\x80\xa60CdChoose the compiled runtime only, and fail if it \xe2\x80\xa6D`Awaitable futures object returned by <code>condvar.wait()</code>CgA set of polynomial constraints with a common selector.DjThis trait is the affine counterpart to <code>Curve</code> and is used \xe2\x80\xa6BcFunctions available in the contractCjRevealed public inputs of the <code>Fee_V1</code> ZK proofCkMessage representing a node announcing a key on the networkCkMessage representing a chunk reply when a file is not foundEhThe <code>HeaderStore</code> is a structure representing all <code>sled</code> trees \xe2\x80\xa6AiA JSON-RPC request objectAlGet the current node bucketsAdGet the router stateBcMagic bytes prepended to the binaryAgThe Monero Merkle proofCnTODO: Loop through set of ntps, get their average response \xe2\x80\xa6BiNumber of windows for a full-width scalarCjA permutation did not preserve the original value of a \xe2\x80\xa6AkOutbound keepalive message.AjInbound keepalive message.BdP2P protocol implementation for fud.AjScalar field element arrayCbReserved for implementation-defined server-errors.AmDefines the network settings.ClAn SMT adapter for sled overlay storage. Compatible with \xe2\x80\xa6CjStructure represening a request to ask a node for up to\xe2\x80\xa6BaA fixed column of a lookup table.AkTCP Listener implementationBeNative contract test harness instanceDcStructure representing the response to <code>TipRequest</code>, \xe2\x80\xa6AkTor Listener implementationDkA Transaction contains an arbitrary number of <code>ContractCall</code> \xe2\x80\xa6CnA \xe2\x80\x9cvirtual cell\xe2\x80\x9d is a PLONK cell that has been queried \xe2\x80\xa6CeWitness an unsigned integer into a Base field elementkApp versionCjApplication version, used for convenient protocol matchingCbLock to restrict when proposals appends can happenCiAuxiliary function to calculate provided block height \xe2\x80\xa6CeBlock related definitions and storage implementationsCkBlockwindow from block height and target time. Used for \xe2\x80\xa6BaElectrum nodes timeout in seconds0oDAO bulla blindChThe values of the virtual cells used by this constraint.CnThis is a very simple check to verify that the system time \xe2\x80\xa6DfAdd <code>self</code> to a given timestamp Errors on integer overflow.DgSubtract <code>self</code> with a given timestamp Errors on integer \xe2\x80\xa6AdType of this column.CmAuxiliary function to compute the corresponding fee value \xe2\x80\xa6BjMaximum number of parallel lookup requestsAeConditional selectionCjConfirm already imported DAO metadata into the wallet. \xe2\x80\xa6AnThe contract ID being executedBeThe <code>ContractId</code> to deployBcThe <code>ContractId</code> to lockAjID of the contract invokedBcContract ID definitions and methodsBcGets the coordinates of this point.CjCopies the value to a given advice cell and constrains \xe2\x80\xa6AcCreates a new gate.CeCreate Schnorr signatures for the entire transaction.CnFetch known unspent balances from the wallet for the given \xe2\x80\xa6Bg<code>Dao::Propose</code> functionalityAgDisable graph debuggingAfEnable graph debuggingBhReturns the denominator, if non-trivial.AgContract deployment gasDkDerives a <code>TokenId</code> from provided function id, user data and \xe2\x80\xa6BhThe optional description of the contractDeDeserialize a given payload in <code>entrypoint</code> The return \xe2\x80\xa6AbTimeout in secondsAhEnable network debuggingBkSend a dnet notification over the publisherDeAn array of empty hashes hashed with themselves <code>N</code> times.00BcPointer to the Event Graph instanceCjBlock height of the transaction this proposal was executedAiExits the current region.ClParameter defining the expiration of each item, for time \xe2\x80\xa6ClAddress selection algorithm that works as follows: up to \xe2\x80\xa6ChFetch a single chunk and return what should be done nextCcCurrently active downloading tasks (running the \xe2\x80\xa6AdOrchard fixed bases.BfBlock header hash to identify the forkAoResponse fork block header hash11DiDerive a new <code>PublicKey</code> object given a <code>SecretKey</code>CmThe offset (relative to the start of the region) at which \xe2\x80\xa60CnFetch all aliases from the wallet. Optionally filter using \xe2\x80\xa6DkGet a channel (existing or create a new one) to <code>node</code> about \xe2\x80\xa6CjGrab the channel pointer of provided channel ID, if it \xe2\x80\xa60CmIf there is an existing channel to the same address, this \xe2\x80\xa6AlReturn <code>fileseq</code>.B`Return <code>self.lookups</code>CnFetch given tx hashes from the store\xe2\x80\x99s pending txs tree. \xe2\x80\xa6CgWill return current runtime configured transaction hashClOnly deploy(), metadata() and exec() can call this. Will \xe2\x80\xa6CmShould only be called after the version exchange has been \xe2\x80\xa6CgAuxiliary function to define the ping command handling.CgAuxiliary function to define the scan command handling.CjHandle network errors. Panic if error passes silently, \xe2\x80\xa6CkWaits for a stop signal, then closes all tasks. Ensures \xe2\x80\xa6CkHandles network errors. Panics if errors pass silently, \xe2\x80\xa6DbReturns the VRF output. <strong>It is necessary</strong> to do \xe2\x80\xa6AmHeight cumulative hashes rankCgCurrent fork hashes rank, cached for better performanceBcHeader hash identifier of the blockClHeader hash identifier of the block this transaction was \xe2\x80\xa6CnVerify provided header is valid for provided mining target \xe2\x80\xa6ChAuxiliary function to check current contracts states \xe2\x80\xa60B`Initialize the logging mechanismDcInsert a slice of <code>Header</code> into the store\xe2\x80\x99s sync tree.AeDrk interactive shellCnAuxiliary function to start provided Drk as an interactive \xe2\x80\xa6CgCheck whether we have all the chunks available locally.BhReturns true if call is a DAO execution.BcReturns true if call is a DAO mint.BcReturns true if call is a DAO vote.CnDetermines if this point represents the point at infinity; \xe2\x80\xa6BiDetermines if this point is the identity.CkReturns whether or not this element is on the curve; should0B`Sapling KDF for note encryption.AoRetrieve the last block header.CiTriggered when you need to lookup seeders for a resource.DaTry to fetch zkas bincodes for the given <code>ContractId</code>.CgMagic bytes should be unique per P2P network. Avoid \xe2\x80\xa6CmMagic bytes used to distinguish P2P distinct networks and \xe2\x80\xa6CmProvide safe access to the memory (it must be initialized \xe2\x80\xa6AgMerkle node definitionsCjMerkle path in the Money Merkle tree for <code>coin</code>00A`Transaction rootAjMerkle root for input coinAdRevealed Merkle rootCeBlock height of the transaction this DAO was deployedCjBlock height of the transaction this proposal was deployedAiMint authority public keyAmHTTP JSON-RPC background taskBk<code>Money::TokenMint</code> functionalityDhCreate a new channel to <code>addr</code> in the direct session. The \xe2\x80\xa6AiRaw NTP request executionBaTriggered when we find a new nodeAfOutput coin commitmentAnP2P network protocols handler.ClThe number of connected peers. This means channels which \xe2\x80\xa6AkReturn the gate polynomialsFbExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian \xe2\x80\xa60AnTransaction broadcast protocolCmAuxiliary function to fully purge current forks and leave \xe2\x80\xa6BkQuery a fixed column at a relative positionCjGenerate a random byte based on <code>rand::random</code>.E`Generate a random <code>Hash</code>, byte-array of <code>HASH_LEN</code> length.ClRandomX VM key - length varies to a max len of 60. TODO: \xe2\x80\xa6CkChecks that an expression is in the small range [0..range),D`Remove a slice of <code>u32</code> from the store\xe2\x80\x99s sync tree.CkRun in replay_mode where if set we log Sled DB instructionsCfInternal function that loops on a given stream and \xe2\x80\xa60CkAuxiliary function to purge current forks and reset the \xe2\x80\xa6CeReturns the index of the right child, given an index.CjScans the blockchain for wallet relevant transactions, \xe2\x80\xa6CgSends provided protocol generic action to requested \xe2\x80\xa6CfSet the VersionMessage of the node this channel is \xe2\x80\xa6BeSets the visibility of region labels.C`Simulate the transaction with the state machine.CiSled tree for storing contract source code, utilizing \xe2\x80\xa6CjSends a stop signal and returns immediately. Doesn\xe2\x80\x99t \xe2\x80\xa6CbStop signal that aborts the connector if received.AnReceiver to stop miner threadsCmA map of various subscribers exporting live info from the \xe2\x80\xa6CiSynchronizes blocks from the <code>darkfid</code> daemon.CiSynchronizes blocks between the explorer and a Darkfi \xe2\x80\xa6ClTake Memory by value. Needed to modify the Memory object \xe2\x80\xa6AaBlock target rankCiThe generic handler for <code>TipRequest</code> messages.Cf<code>MessageSubscriber</code> for <code>TipReq</code>DgConverts the <code>GasMetricsKey</code> into a key suitable for use \xe2\x80\xa6A`Token attributesCdBlinding factor for the token ID pedersen commitmentBiBlinding factor for <code>token_id</code>nToken ID blindBb<code>Money::TransferV1</code> APIDa<code>.try_collect()</code> is more convenient way of writing \xe2\x80\xa6CgStart making an outbound connection, using provided \xe2\x80\xa6CiSled tree for storing transaction gas data, utilizing \xe2\x80\xa6CdWallet functionality related to transactions historyCnUnsubscribe from a channel. Removes the associated ID from \xe2\x80\xa6CkUnsubscribe from a message subscription. Must be called \xe2\x80\xa6ClMust be called manually since async Drop is not possible \xe2\x80\xa6CmMove a node to the tail in its bucket, to show that it is \xe2\x80\xa6DkUsage count increments when you call <code>handler.get_channel()</code> \xe2\x80\xa6CaBlinding factor for the value pedersen commitmentBfBlinding factor for <code>value</code>DaReturns the field element value of the <code>AssignedCell</code>.BbFlag to enable tx fee verification0CeMarker to know if we\xe2\x80\x99re supposed to include tx feesDhCheck if the Equi-X solution in a <code>VerifiableNodeData</code> is \xe2\x80\xa6CeVerify Schnorr signatures for the entire transaction.BlVerify ZK proofs for the entire transaction.CjSets the view height for this layout, as a number of rows.oVote commitmenthThe voteCiWrite a single chunk given a stream. The file must be \xe2\x80\xa6AkZK circuits gas consumptionCjGiven a zkas circuit, create a VerifyingKey and insert \xe2\x80\xa6AlOnly deploy() can call this.C`Sends address information to inbound connection.AaAn assigned cell.CeOverlay structure over a <code>Cache</code> instance.CmA struct for collecting and displaying the gates within a \xe2\x80\xa6AdClient module errorsBeResult type used in the Client moduleCnUnique, randomly-generated per-connection ID that\xe2\x80\x99s used \xe2\x80\xa6CmA ContractCall is the part of a transaction that executes \xe2\x80\xa6DhImmutable iterator of a <code>DarkTree</code>, performing DFS post-orderDjThis struct represents a Leaf of a <code>DarkTree</code>, holding this \xe2\x80\xa6CaOur local hash table, storing DHT keys and valuesBgElliptic curve fixed point (a constant)ClVariable Elliptic curve multiplication with a Base field \xe2\x80\xa6DfBuilder for creating <code>EquiX</code> instances with custom settingsCkFixed gas used by the fee call. This is the minimum gas \xe2\x80\xa6Eb<code>FileSequence</code> is an object that implements <code>AsyncRead</code>, \xe2\x80\xa60CgThe floor planner used for this circuit. This is an \xe2\x80\xa6BhA floor planning strategy for a circuit.CbMessage representing a file reply from the networkC`Message representing a ping reply on the networkCjKeeps track of hosts and their current state. Prevents \xe2\x80\xa6AhInvalid/Unexpected replyBiA JSON-RPC error value (code and message)AjA JSON-RPC response objectBhParameters for <code>Deploy::Lock</code>BjState update for <code>Deploy::Lock</code>CkMinimum size allowed for a syntactically valid ZkBinary \xe2\x80\xa6AmCalls tree bounds definitionsDgThe <code>MetricStore</code> serves as the entry point for managing \xe2\x80\xa6BhAtomic pointer to the DarkFi mining nodeCiHTTP JSON-RPC <code>RequestHandler</code> type for p2poolBnLength of the personalization string, in bytesBfPoseidon hash of N Base field elementsAnDefines ping and pong messagesAlImplements the seed protocolCfGenerator used in SinsemillaHashToPoint for Merkle \xe2\x80\xa6AcSOCKS5 proxy clientmSOCKS5 dialerBjTemporary memory used by the Equi-X solverC`Subscription to the Publisher. Created using \xe2\x80\xa6DdStructure representing the response to <code>SyncRequest</code>, \xe2\x80\xa6BjAn error returned when a future times out.AlUnix Listener implementationAlAtomic pointer to validator.CjValueCommitV is used in scalar mul with a short signed \xe2\x80\xa6CmThis is a verifying key which allows for the verification \xe2\x80\xa6CmExposes the \xe2\x80\x9cvirtual cells\xe2\x80\x9d that can be queried while \xe2\x80\xa6Cf<code>MessageSubscriber</code> for <code>TipRep</code>CnPrivate function to concurrently transmit a message to all \xe2\x80\xa6BeAccept addresses the network will useChAdd a new dispatcher for specified <code>Message</code>.BmAssert that all holders\xe2\x80\x99 trees are the sameAdAssign a fixed valueC`Assign a table region to an absolute row number.ClAuxiliary function to write to multiple trees completely \xe2\x80\xa6CmProving key for the <code>AuthTokenMint_V1</code> zk circuit,0DkSet to <code>true</code> to automatically set the length of the file on \xe2\x80\xa60CmCurrent list of block hashes, the most recent block is at \xe2\x80\xa6AeRewarded block heightCdBlock height of the transaction this vote was castedCbCurrently configured block time target, in secondsAdAre we bootstrapped?CdBroadcast a message concurrently to all given peers.CmBroadcast a given transaction to darkfid and forward onto \xe2\x80\xa6CgConvert big-endian bytes into base10 or decimal number.CkSend a DHT ping request when there is a new channel, to \xe2\x80\xa6CdVerify that a solution proof passes the effort test.CjChunk a stream. Returns a hasher (containing the chunk \xe2\x80\xa6lClear inputs0BmReturns the Keccak 256 hash of the byte inputCeThe node checks if best fork can be confirmed. If \xe2\x80\xa6ClCheck if best fork proposals can be confirmed. Consensus \xe2\x80\xa6CgReturn the socket address without transport processing.DiThis creates a proof for the provided <code>circuit</code> when given \xe2\x80\xa6AeCurrently opened file0CfGenerate a <code>Timestamp</code> of the current time.CjFully validate an event for the correct layout against \xe2\x80\xa6BoLatest block cumulative difficulties ringbufferAiDisable network debuggingAhEnable network debuggingBhCreates a new region and enters into it.ChThe ephemeral public key used for Diffie-Hellman key \xe2\x80\xa6AcEqui-X effort value0CdThe transaction hash where the proposal was executedEgFetch <code>chunks</code> for <code>chunked</code> (file or directory) from seeders \xe2\x80\xa6EdFetch <code>self.count</code> BTC block hashes from <code>height</code> using an \xe2\x80\xa6AkAllocate a new fixed columnDkFormats a <code>Duration</code> into a user-friendly format using days, \xe2\x80\xa6DbExecutes <code>num_steps</code> of MiMC-calculation in forward \xe2\x80\xa6CnCreate a token freeze transaction. Returns the transaction \xe2\x80\xa6EeCreate a <code>Money::GenesisMint</code> transaction for a given <code>Holder</code>.ClRetrieve all headers from the store\xe2\x80\x99s sync tree in the \xe2\x80\xa6CnRetrieve all wasm bincodes from the store\xe2\x80\x99s wasm tree in \xe2\x80\xa6ChRetrieve <code>BlockInfo</code>s by given heights range.ChFetch blocks within a specified range from the database.CdRetrieves the latest state (root) from the database.CfFetch given tx hashes locations from the store\xe2\x80\x99s \xe2\x80\xa6CnTry to get the chunked file or directory from geode, if we \xe2\x80\xa6CnMaximum number of addresses (with preferred transports) to \xe2\x80\xa60AkDAO\xe2\x80\x99s governance token IDCjAuxiliary task to handle SIGINT for forceful process abort00ChAuxiliary function to define the alias command handling.ClAuxiliary function to handle a potential reorg. We first \xe2\x80\xa6ChAuxiliary function to define the spend command handling.ChAuxiliary function to define the token command handling.DfHash a slice of values together with a prefix <code>persona</code> \xe2\x80\xa6BmGet resource path from hash using the sled dbCmHash of the data that was last written to the file system \xe2\x80\xa6BlHeader definition and storage implementationCmGenerate the sled batch corresponding to an insert to the \xe2\x80\xa600CnTakes a batch of field elements, inserts these hashes into \xe2\x80\xa6DhInsert a slice of <code>u32</code> and block hashes into overlay\xe2\x80\x99s \xe2\x80\xa6DjInsert a slice of <code>u32</code> and block hashes into the store\xe2\x80\x99s \xe2\x80\xa6CjInspect and verify a given swap (half or full) transactionCmGet a compressed bytes (leading-zero-truncated big-endian \xe2\x80\xa6CnCheck whether this node has connections to any peers. This \xe2\x80\xa6BdReturns true if call is a money fee.ClAuxiliary function that determines whether the specified \xe2\x80\xa6Dg<code>k_values_table</code> should be reused across different chips \xe2\x80\xa6BnReturn the number of chunks available locally.ChThe index of the lookup that is not satisfied. These \xe2\x80\xa6BjFind <code>k</code> nodes closest to a keyBnCurrently active lookup tasks (running the \xe2\x80\xa6AoFind value for <code>key</code>CmOptional max capacity of the tree, including all children \xe2\x80\xa6CkOptional max capacity of the forest, including all tree \xe2\x80\xa6DjThe <code>sled</code> tree storing the merkle trees of the blockchain, \xe2\x80\xa6EgMap holding a <code>MeteringQueue</code> for each [<code>Message</code>] to perform \xe2\x80\xa6CjMin capacity of the tree, including all children nodes \xe2\x80\xa6CkOptional min capacity of the forest, including all tree \xe2\x80\xa6ClReturns the minimum necessary rows that need to exist in \xe2\x80\xa6AfMint authority keypair0CdGenerate a new keypair and place it into the wallet.CkObtains a point given Jacobian coordinates $X : Y : Z$, \xe2\x80\xa6AeBackground task that:CgMacro calling <code>fud.event_publisher.notify()</code>BfPerform a topological sort of the DAG.BkDecrypted notes associated with each output0CnIndex showcasing this leaf\xe2\x80\x99s parent tree, when all leafs \xe2\x80\xa6BmGet resource hash from path using the sled dbCcAuxiliary function to print provided string buffer.CnCached <code>ProvingKey</code>s for native contract ZK provingBfImport given DAO vote into the wallet.BmQuery an advice column at a relative positionCjQuery provided table using provided query for multiple \xe2\x80\xa6CgQuery provided table from selected column names and \xe2\x80\xa6BjGenerate random bytes of the given length.CmReturns a decoded Message command. We start by extracting \xe2\x80\xa6BjTask that is listening for the stop signalClReceive version info, check the message is okay and send \xe2\x80\xa6CfRemove provided alias record from the wallet database.CjHandles blockchain reorganizations (reorgs) during the \xe2\x80\xa6CgResets blocks in the database by clearing all block \xe2\x80\xa6CkReturns the socket address that has undergone transport \xe2\x80\xa6CmReceive seeders from a subscription, and execute an async \xe2\x80\xa6EeSelect coins from <code>coins</code> of at least <code>min_value</code> in total. \xe2\x80\xa6DkSends the encoded payload of provided <code>SerializedMessage</code> by \xe2\x80\xa6CkSend version info and wait for version acknowledgement. \xe2\x80\xa6DiConstructs a <code>JsonError</code> representing a server error using \xe2\x80\xa6BmSets the latest state (root) to the database.CmSubtract given gas cost from remaining gas in the current \xe2\x80\xa6CjThe generic handler for <code>SyncRequest</code> messages.CmAuxiliary function to block until node is connected to at \xe2\x80\xa6AnHeight cumulative targets rankCgCurrent fork mining targets rank, cached for better \xe2\x80\xa6D`Converts a <code>Transaction</code> and its associated block \xe2\x80\xa6CgThe blinds to be used for token ID pedersen commitmentsBdToken ID commitment for the proposalBdToken commitment for the vote inputsA`Token commitmentBeCommitment for the input\xe2\x80\x99s token IDBfCommitment for the output\xe2\x80\x99s token IDBcFreeze the supply of a minted tokenAgBlockchain total blocksAdTransactions overlayAoTransactions related sled treesCjRPC handlers for transaction data, lookups, and processingBcManages transaction data processingCkTry to update the registry. If the host already exists, \xe2\x80\xa6BkMark a given coin in the wallet as unspent.CmAuxiliary function that extracts source code files from a \xe2\x80\xa6CkValidate a new event for the correct layout and enforce \xe2\x80\xa6DiThe blinds to be used for value pedersen commitments <code>[0]</code> \xe2\x80\xa6AnValue commitment for the inputBkPedersen commitment for the input\xe2\x80\x99s valueBlPedersen commitment for the output\xe2\x80\x99s valueAfVerification functionsBgCheck a <code>SolutionItemArray</code>.DeVerify given <code>BlockInfo</code>, and apply it to the provided \xe2\x80\xa6BgCheck a <code>SolutionByteArray</code>.CaVerifies that the chunk hash matches the content.ClReturns a boolean indicating whether or not the proof is \xe2\x80\xa6CbVerify a MerkleProof with the given root and leaf.AfWASM bincode to deployBiWebassembly bincode of the smart contractAhAEAD tag length in bytesDlA verifier that checks multiple proofs in a batch. <strong>This </strong>\xe2\x80\xa6BgOut of bounds index passed to a backendBgGraphical renderer for circuit layouts.BfError codes available in the contract.EdThe <code>ContractStore</code> is a structure representing all <code>sled</code> \xe2\x80\xa6ClNative DARK token ID. It does not correspond to any real \xe2\x80\xa6BeParameters for <code>Dao::Exec</code>BgState update for <code>Dao::Exec</code>BeParameters for <code>Dao::Mint</code>BgState update for <code>Dao::Mint</code>BeParameters for <code>Dao::Vote</code>BgState update for <code>Dao::Vote</code>B`General DarkTree related errors.BaAtomic pointer to the DarkFi nodeoDialer variantsBcDefines direct connections session.CfAtomic pointer to an <code>EventGraph</code> instance.DkAn enum to represent a set of files, where you can use <code>All</code> \xe2\x80\xa6CcMessage representing a chunk reply from the networkCkRepresents a key used to store and fetch metrics in the \xe2\x80\xa6ChA Container for managing Grey, White, Gold and Black \xe2\x80\xa6o$\\frac{1}{2^K}$CgQuery of instance column at a certain relative locationAhInternal JSON-RPC error.CfChoose the interpreted runtime, without trying the \xe2\x80\xa6AlInvalid method parameter(s).CkLoosely two Base field elements and see if a is less than bBcDefines manual connections session.CkAn in-memory storage, useful for unit tests and smaller \xe2\x80\xa6CkStruct to keep track of some sequential metered actions \xe2\x80\xa6ClThis struct represents all the Proof of Work information \xe2\x80\xa6BcFunctions available in the contractAi64 bit native range checkAoA location outside of a region.CkMain PeerDiscovery process that loops through connected \xe2\x80\xa6DjPeerDiscovery process for that sends <code>GetAddrs</code> messages to \xe2\x80\xa6BcThe <code>2^s</code> root of unity.ClHighly experimental JSON-RPC client implementation using \xe2\x80\xa6BdOption for selecting a HashX runtimeCeTrait for public keys that implements a signature \xe2\x80\xa6CjTrait for secret keys that implements a signature creationCaAuxiliary structure used to keep track of signals00CaA future that times out after a duration of time.CmSends version information to inbound connection. Response \xe2\x80\xa6CfThe reasons why a particular circuit is not satisfied.CkCustom wallet database errors available for drk. Please \xe2\x80\xa6BlAuxiliary function to abort pending request.ChUpon version exchange, the node reports our external \xe2\x80\xa6AlAllocate a new advice columnBgAssign an advice column value (witness)CcAssign a region of gates to an absolute row number.DcExecutes <code>num_steps</code> of MiMC-calculation in backward \xe2\x80\xa6EdConvert bits, Vec slice of <code>bool</code> into bytes, <code>Vec&lt;u8&gt;</code>.EdConvert a Vec slice of bit or <code>bool</code> into a number as <code>usize</code>.CiAuxiliary function to calculate provided block height \xe2\x80\xa6BhConvert a bytes slice into a Vec of bit.CjAuxiliary function to compute provided transaction\xe2\x80\x99s \xe2\x80\xa6BaChannel ID -&gt; ChannelCacheItemBaChunk transfer timeout in seconds0AhTLS client configurationBgReturns the Keccak 256 hash of 2 hashesBk<code>Deployooor::Lock</code> functionalityC`Internal helper function to create a TCP socket.0BiThe DAO Merkle tree containing DAO bullasBjCurrently configured DAG rotation, in daysCaThe publisher for which we can give deg info overAgSubscribe to deg eventsDhDeletes source code associated with provided <code>ContractId</code> \xe2\x80\xa6CbDerive a contract ID from a <code>PublicKey</code>ClExternal address of the sender node, if it exists (empty \xe2\x80\xa6EcFills a fixed <code>column</code> starting from the given <code>row</code> with \xe2\x80\xa6EgConverts a <code>sled</code> key into a <code>GasMetricsKey</code> by deserializing \xe2\x80\xa6DiParse provided toml string into <code>DaoParams</code>. If a specific \xe2\x80\xa6CfGenerate a random keypair and run the PoW to get a \xe2\x80\xa6BdRetrieve genesis (first) block info.mGenesis blockBbThe genesis block for this harnessCmFetch all hashes after given height. In the iteration, if \xe2\x80\xa6ClRetrieve complete order from the store\xe2\x80\x99s order tree in \xe2\x80\xa6DjFetches <code>GasMetrics</code>s associated with the provided slice of \xe2\x80\xa6C`Return a mutable chunk from <code>chunks</code>.BbReturn <code>self.constants</code>CkRetrieves all contracts from the store excluding native \xe2\x80\xa6CmFetch DAO Merkle trees from the wallet. If a tree doesn\xe2\x80\x99\xe2\x80\xa6ChGet the last_seen field for a given entry on a hostlist.CnFetch the last header in the store\xe2\x80\x99s sync tree, based on \xe2\x80\xa6BoFetch all known DAO proposalss from the wallet.CkDowngrade host to Greylist, remove from Gold or White list.CiAuxiliary function to define the wallet command handling.Di<code>blake3(self || tree_name)</code> is used in databases to have a \xe2\x80\xa6CgRequests a hasher that accepts messages and returns \xe2\x80\xa6BjCreates a hex formatted string of the dataCgGet the home directory from the passwd entry of the \xe2\x80\xa6ClP2P accept addresses the instance listens on for inbound \xe2\x80\xa6DmAdds contract source code <code>ContractId</code> and <code>Vec</code> of \xe2\x80\xa6DeInserts <code>ContractSourceFile</code>s associated with provided \xe2\x80\xa6BoReturns true if call is a deployoor deployment.CbCheck if store\xe2\x80\x99s sync tree contains any records.CiReturns true iff the given index represents a left child.BaCheck whether a URL is local hostC`Returns true if transaction is a PoW reward one.BcDefines how keys are printed/loggedBmAuxiliary function to retrieve last proposal.CbCoin\xe2\x80\x99s leaf position in the Merkle tree of coinsCcLeaf position of the DAO in the Merkle tree of DAOsCgLeaf position of the proposal in the Merkle tree of \xe2\x80\xa6C`Provides the number of stored metrics by height.DjCreate a <code>Deployooor::Lock</code> transaction with the given WASM \xe2\x80\xa6ChCreate a feeless contract redeployment lock transaction.BoMark provided transaction input coins as spent.BhStore for tracking chain-related metricsCkFetch known unspent balances from the wallet and return \xe2\x80\xa6DdGet the required length of bytes from a <code>Range</code>, bits \xe2\x80\xa6BkAll our known secrets to decrypt coin notesCgOur own DAOs proposals with their corresponding DAO \xe2\x80\xa6AbP2P datastore path0CjConvenience module to import all the pasta traits. You \xe2\x80\xa6DhThe <code>sled</code> tree storing the order of all the node pending \xe2\x80\xa6BdExits out of the existing namespace.0CeWrapper around poseidon in <code>halo2_gadgets</code>Bc<code>Money::PoWRewardV1</code> APIBiBase trait for implementing P2P protocolsBjProtocol for ping-pong keepalive messages.CmSeed server protocol. Seed server is used when connecting \xe2\x80\xa6BbValidator blockchain sync protocolCkRemove seeders that are older than <code>expiry_secs</code>DdGenerate a vector of random <code>Hash</code> with the given length.CjAttempt to read chunk hashes and files metadata from a \xe2\x80\xa6CkWaits for ping, then replies with pong. Copies ping\xe2\x80\x99s \xe2\x80\xa6CjThe channel used to skip waiting for a JSON-RPC client \xe2\x80\xa6CjTasks that are trying to create a direct channel (they \xe2\x80\xa6CjRuns the ping-pong protocol. Creates a subscription to \xe2\x80\xa6CkSend our own external addresses over a channel. Set the \xe2\x80\xa60AhTLS server configurationAjUpdate a single file size.CmRegisters the channel. First performs a network handshake \xe2\x80\xa6CnGet a fixed length byte-array or <code>Hash</code> from slice.CdSMT root for the input\xe2\x80\x99s nullifier exclusion proofC`Subscribe to a message on the message subsystem.ClCompute the header\xe2\x80\x99s template hash, which excludes its \xe2\x80\xa6CnConverts the provided JSON-RPC parameters into an array of \xe2\x80\xa6DfAuxiliary function to convert a <code>ContractRecord</code> into a \xe2\x80\xa6DcAuxiliary function to convert a <code>BlockRecord</code> into a \xe2\x80\xa6DdAuxiliary function to convert <code>BaseStatistics</code> into a \xe2\x80\xa6DfAuxiliary function to convert <code>MetricStatistics</code> into a \xe2\x80\xa6DiAuxiliary function to convert a <code>TransactionRecord</code> into a \xe2\x80\xa6BoThe token ID of the party\xe2\x80\x99s output to receiveCbThe token ID of the party\xe2\x80\x99s input to swap (send)Bc<code>Money::TokenMintV1</code> APIEcTransposes a <code>Value&lt;impl IntoIterator&lt;Item = V&gt;&gt;</code> into a \xe2\x80\xa6ChInternal function that sends an error message to all \xe2\x80\xa6CkConcurrently transmits an error message across dispatchers.CiEncrypted user data field. An encrypted commitment to \xe2\x80\xa6CkIterate over chunks and find which chunks are available \xe2\x80\xa6A`Gas used by WASMCnConstructs a set of constraints that are controlled by the \xe2\x80\xa6AiAllowed fields for proofsAeVersion of the binaryCmStructure representing basic statistic extracted from the \xe2\x80\xa6Dj<code>ChunkedStorage</code> is a representation of a file or directory \xe2\x80\xa60CnRepresents a contract record embellished with details that \xe2\x80\xa6CmRepresents the number of days in each month for both leap \xe2\x80\xa6BbMain result type used by DarkTree.BcFunctions available in the contractBjParameters for <code>Deploy::Deploy</code>BlState update for <code>Deploy::Deploy</code>BdRepresents an explorer configurationCnCustom RPC errors available for blockchain explorer. These \xe2\x80\xa6BfPrivate values related to the Fee callCkMessage representing a find file/chunk request from the \xe2\x80\xa6CbMessage representing a ping request on the networkBcDefines inbound connections sessionBlThe JSON sent is not a valid Request object.BgA JSON-RPC subscriber for notificationsBe$\\ell^\\mathsf{Orchard}_\\mathsf{base}$ClStrictly compare two Base field elements and see if a is \xe2\x80\xa6C`Defined maximum size of a stored chunk (256 KiB)CkMessage metering score value. Set to 0 for no impact in \xe2\x80\xa6BmThe method does not exist / is not available.CmStructure to hold a JSON-RPC client and its config, so we \xe2\x80\xa6Aj253 bit native range checkClRepresents network configurations for localnet, testnet, \xe2\x80\xa6DaStructure representing a <code>DAO_PROPOSALS_TABLE</code> record.CjAsynchronous trait implementing a handler for incoming \xe2\x80\xa6ChBitwise selectors for the <code>protocol_registry</code>C`A verifier that checks a single proof at a time.ChPluggable storage backend for the SMT. Has a minimal \xe2\x80\xa6CgOverlay structure over a <code>TxStore</code> instance.AoTransaction verification errorsCdRequests version information of outbound connection.BcGlobal limit of messages per windowBnResult type used in the wallet database moduleCjConditionally select between a and b (return a if a is \xe2\x80\xa6AlBlinding facfor of all votesAbValue of all votesCnNumber of latest BTC block hashes that are valid for fud\xe2\x80\x99\xe2\x80\xa60AlChannel ID -&gt; usage countCeCheck <code>DarkLeaf</code> children indexes validityBbConsensus protocol background taskClAsync task used for listening for new blocks and perform \xe2\x80\xa6CjCheck if the store\xe2\x80\x99s order tree contains a given height.BjContracts and Wasm storage implementationsBgCopy payload to the start of the memoryBmBackground task periodically pruning the DAG.AfDao Proposal snapshotsCeJSON-RPC client to execute requests to darkfid daemonCfJSON-RPC client used to execute requests to Darkfi \xe2\x80\xa6EdDecrypt the <code>ElGamalEncryptedNote</code> using a <code>SecretKey</code> for \xe2\x80\xa6BiFetch default secret key from the wallet.AgContract deploy keypair0AiDiffie-Hellman techniquesCnDirect connections session. Manages the creation of direct \xe2\x80\xa6CbThe publisher for which we can give dnet info overAhSubscribe to dnet eventsAjDefault download directoryCkDefault path to store downloaded files (defaults to &lt;\xe2\x80\xa6DdEncrypt given values to the given <code>PublicKey</code> using a \xe2\x80\xa6CjThis function executes a given SQL query that contains \xe2\x80\xa6CiThe external_addrs is set by the user but we need the \xe2\x80\xa6CkP2P external addresses the instance advertises so other \xe2\x80\xa6CmP2P external addresses node advertises so other peers can \xe2\x80\xa6CjFetch a single resource metadata from seeders received \xe2\x80\xa6ChGet up to n random peers. Schemes are not taken into \xe2\x80\xa6DgDownload a file or directory from the network to <code>path</code>. \xe2\x80\xa6BdThe files the user wants to downloadDfGet <code>n</code> closest known nodes to a key TODO: Can be optimizedCbAuxiliary function to consume the messages buffer.DeGenerate and add an empty block to the given <code>Holder</code>s \xe2\x80\xa6CmFetch n hashes after given height. In the iteration, if a \xe2\x80\xa6CnRetrieve all contract states from the store\xe2\x80\x99s state tree \xe2\x80\xa6EcFetches the <code>BlockInfo</code> associated with a given <code>HeaderHash</code>.CjWill return current runtime configured verifying block \xe2\x80\xa6ClOnly deploy(), metadata() and exec() can call this. Will \xe2\x80\xa6CgFetch given block height numbers from the store\xe2\x80\x99s \xe2\x80\xa6ClFetch the fisrt header in the store\xe2\x80\x99s sync tree, based \xe2\x80\xa6CmFetch the Money Merkle tree from the cache. If it doesn\xe2\x80\x99\xe2\x80\xa6CjAuxiliary function to define the inspect command handling.CiAuxiliary function to handle a request in the background.CiHandles an incoming JSON-RPC request by executing the \xe2\x80\xa6ChAuxiliary task to handle SIGHUP, SIGTERM, SIGINT and \xe2\x80\xa600DjProtocol function handling <code>TipReq</code>. This is triggered when \xe2\x80\xa6CjAuxiliary function to define the unspend command handling.CnGlobally accessible function to perform a version exchange \xe2\x80\xa6DfHash a slice of values together with a prefix <code>persona</code> \xe2\x80\xa6D`The generic handler for <code>HeaderSyncRequest</code> messages.CcInitialize wallet with tables for the DAO contract.DiInsert a slice of <code>Transaction</code> into the store\xe2\x80\x99s pending \xe2\x80\xa6AlMarker for IPv6 availabilityBgReturns true if call is a DAO proposal.CmReturns true if the transaction consists of a single call \xe2\x80\xa6CnManual connections session. Manages the creation of manual \xe2\x80\xa6CnInternal function to retrieve metering queue current total \xe2\x80\xa6DgHolder\xe2\x80\x99s instance of the SMT tree for the <code>Money</code> contractBi<code>Money::OtcSwap</code> functionalityBj<code>Money::Transfer</code> functionalityB`Supported network configurationsDiOpen the file at (<code>current_file_index</code> + 1). If no file is \xe2\x80\xa6AcPeer discovery task0AiBulla of the DAO proposalAeMinted proposal bullaAmProposal bulla being voted onBaThe proposal bulla being voted onAbThe proposal bulla0ClThe minimum amount of governance tokens needed to open a \xe2\x80\xa6C`Creates a new (sub)namespace and enters into it.0CaPrints the queries in this circuit to a CSV grid.CjQueries the cell of an instance column at a particular \xe2\x80\xa6BoQuery an instance column at a relative positionCgQuery provided table from selected column names and \xe2\x80\xa6BiQuery a selector at the current position.BcRetrieve a random connected channelCmRecomputes the Merkle tree depth first from the bottom of \xe2\x80\xa6Eh<code>RefineSession</code> manages the <code>GreylistRefinery</code>, which randomly \xe2\x80\xa6DeRemove a slice of <code>TransactionHash</code> from the store\xe2\x80\x99s \xe2\x80\xa6CcThis function reverts gas metric entries in the \xe2\x80\xa6BnWallet functionality related to scanned blocksDbThe <code>sled</code> tree storing the scanned blocks from the \xe2\x80\xa6AmGet pointer to direct sessionCbReference to configured <code>DirectSession</code>AmGet pointer to manual sessionCbReference to configured <code>ManualSession</code>AmGet pointer to refine sessionCbReference to configured <code>RefineSession</code>CkGas used metrics related to signatures across transactions.BjSnapshotted Merkle root in the Money state0BgSnapshotted SMT root in the Money state0C`Current contracts states checksums Monotree(SMT)AjStop mining at this heightChPublisher listening for stop signal for closing this \xe2\x80\xa6CnImplementation of async background task spawning which are \xe2\x80\xa6CnCreates a subscription to a stopped signal. If the channel \xe2\x80\xa6CiAuxiliary function to retrieve best fork state from a \xe2\x80\xa6CkCalculates the total gas used by summing all individual \xe2\x80\xa6BiTotal gas used for processing transactionDkBuild a <code>Solution</code> from an array of items, checking that the \xe2\x80\xa6DhBuild a <code>Solution</code> from a fixed size byte array, checking \xe2\x80\xa6BoGarbage collection task transactions batch sizeCcAuxiliary function to retrieve unproposed valid \xe2\x80\xa6BbUser data for the party\xe2\x80\x99s outputBoValidate provided block according to set rules.nVote aggregatenVote nullifierDiSame as <code>Event::new()</code> but allows specifying the timestamp \xe2\x80\xa6B`Blinding factor for the yes voteAjAddrs message fields size:CbGas limit for total block transactions(50 full \xe2\x80\xa6CgAuxiliary structure used to keep track of block PoW \xe2\x80\xa6CbA cell used in an active gate was not assigned to.BgContract ID for the native DAO contractDjMutable iterator of a <code>DarkTree</code>, performing DFS post-order \xe2\x80\xa6CnRepresents the service layer for the Explorer application, \xe2\x80\xa6CiThe location within the circuit at which a particular \xe2\x80\xa6ChStructure represening a request to ask a node a fork \xe2\x80\xa6BhRequests address of outbound connection.CnInitial genesis timestamp in millis (07 Sep 2023, 00:00:00 \xe2\x80\xa6CiThe main interface for interacting with the hostlist. \xe2\x80\xa6AaListener variantsCcStruct holding necessary information to build a \xe2\x80\xa6CcThe number of parents an event is supposed to have.BeDefines outbound connections session.CmHalf of the swap data, includes the coin that is supposed \xe2\x80\xa6DeAuxiliary <code>Proposal</code> wrapper structure used for messaging.BiDefines address and get-address messages.BbDefines generic messages protocol.CiImplements the protocol version handshake sent out by \xe2\x80\xa6B`Defines seed connections session8BjDerivation prefix for <code>TokenId</code>CeConfiguration for initializing <code>Validator</code>CgUsed to calculate how many items to retain for next \xe2\x80\xa6CkAmount of latest blocks to exlude from the calculation. \xe2\x80\xa6CiInsert a given slice of pending transactions into the \xe2\x80\xa6DjValidate a set of <code>BlockInfo</code> in sequence and apply them if \xe2\x80\xa6AlAll value staked in the voteEhCreate and append a <code>Money::Fee</code> call to a given <code>Transaction</code> \xe2\x80\xa6EeCreate and append a <code>Money::Fee</code> call to a given <code>Transaction</code>.CnAuxiliary function to print or insert provided messages to \xe2\x80\xa6CjThe node locks its consensus state and tries to append \xe2\x80\xa6CnGiven a proposal, the node verifys it and finds which fork \xe2\x80\xa6CnAuxiliary function to append a proposal and update current \xe2\x80\xa6CgEnforces an assertion on the contained value, if known.ChThis macro is used for a standard way of daemonizing \xe2\x80\xa6Cc<code>AuthTokenMint_V1</code> zkas circuit ZkBinary0CkAuto self discovered addresses. Used for filtering self \xe2\x80\xa6CgConverts a batch of projective elements into affine \xe2\x80\xa6BlAuxiliary function to find best ranked fork.CiTo block a peer trying to access by all ports, simply \xe2\x80\xa6DhA <code>HashSet</code> containg event IDs and their 1-level parents. \xe2\x80\xa6BaService to create direct channelsCmCalculate the gas use for verifying a given zkas circuit. \xe2\x80\xa6CkDecrement the channel usage count, if it becomes 0 then \xe2\x80\xa6CjClose a direct channel if it\xe2\x80\x99s not used by anything. \xe2\x80\xa6CgCloses all open tasks. Takes all the tasks from the \xe2\x80\xa6AjReturn the constraint nameBm<code>Deployooor::Deploy</code> functionalityAeCurrent genesis eventBgMerkle root of the DAO in the DAO stateDcHolder\xe2\x80\x99s instance of the Merkle tree for the <code>DAO</code> \xe2\x80\xa6BiCheck if a database contains a given key.CkEveryone can call this. Checks if a key is contained in \xe2\x80\xa6BeFetch default pubkey from the wallet.DgCreate a <code>Deployooor::Deploy</code> transaction with the given \xe2\x80\xa6CaCreate a feeless contract deployment transaction.CaGas consumed for deployments across transactions.BnMaximum number of parallel DHT lookup requestsClReturns the address used for UI purposes like in logging \xe2\x80\xa6CmHelper function for verifiers to generate empty witnesses \xe2\x80\xa6ClEnables this fixed column to be used for global constant \xe2\x80\xa6BdEnable equality on this TableColumn.CmEnable the ability to enforce equality over cells in this \xe2\x80\xa6BdEnables a selector at the given row.BbUsed to send events to fud clientsBaDAO proposals executor public keyBaDAO proposals executor secret keyDiExecute the transaction created by <code>lock_contract()</code> for a \xe2\x80\xa6CiAuxiliary function to calculate provided block height \xe2\x80\xa6oFee value blindCjMethod to fetch the last_seen field for a give address \xe2\x80\xa6BlReturns a formated string from the duration.CkGenerate a <code>Block</code> from a <code>BlockInfo</code>CmPerform garbage collection over the filesystem hierarchy. \xe2\x80\xa6CkTakes in an FnMut closure and returns a constant-length \xe2\x80\xa6CdA function to generate empty hashes with a given \xe2\x80\xa6Be<code>Money::GenesisMintV1</code> APIDbFetches all <code>GasMetrics</code> from the main tree without \xe2\x80\xa6ClRetrieve all transactions from the store\xe2\x80\x99s pending txs \xe2\x80\xa6AoProvides the total block count.AkFetch a DAO given its name.CkRetrieve a deploy authority keypair and status for providedBfReturn a mutable <code>fileseq</code>.CjReturns the size (number of bytes) of an object in the \xe2\x80\xa6CjInternal function, get bytes size for an object in the \xe2\x80\xa6CkRetrieve all transactions from the pending tx store. Be \xe2\x80\xa6BdReturn <code>self.permutation</code>CfFetch provided token unspend balances from the wallet.DaFetches the <code>GasData</code> associated with the provided \xe2\x80\xa6CnReads a transaction location by hash from the transactions \xe2\x80\xa6CiOnly metadata() and exec() can call this. Will return \xe2\x80\xa6CkFetch all transactions history records, excluding bytes \xe2\x80\xa6CmPick the most frequent occuring reported external address \xe2\x80\xa6CkAuxiliary function to define the contract command handling.ChAuxiliary function to define the dao exec subcommand \xe2\x80\xa6ChAuxiliary function to define the dao list subcommand \xe2\x80\xa6ChAuxiliary function to define the dao mint subcommand \xe2\x80\xa6ChAuxiliary function to define the dao view subcommand \xe2\x80\xa6ChAuxiliary function to define the dao vote subcommand \xe2\x80\xa6CkAuxiliary function to define the explorer command handling.ChAuxiliary function to define the otc init subcommand \xe2\x80\xa6ChAuxiliary function to define the otc join subcommand \xe2\x80\xa6ChAuxiliary function to define the otc sign subcommand \xe2\x80\xa6CkAuxiliary function to define the transfer command handling.ChInbound connections session. Manages the creation of \xe2\x80\xa6C`Increment the nonce value inside this challenge.DgInsert a slice of <code>TransactionHash</code> into the overlay\xe2\x80\x99s \xe2\x80\xa6DeInsert a slice of <code>TransactionHash</code> into the store\xe2\x80\x99s \xe2\x80\xa6ClCreate and insert file or directory metadata into Geode. \xe2\x80\xa6DeAdds contract metadata using provided <code>ContractId</code> and \xe2\x80\xa6EdInserts <code>ContractId</code> and <code>ContractMetaData</code> pairs into the \xe2\x80\xa6CkInsert a file or directory from the file system. Called \xe2\x80\xa6AnAllocate a new instance columnDjVerify current <code>DarkTree</code>\xe2\x80\x99s leafs indexes validity, based \xe2\x80\xa6DhVerify each individual <code>DarkTree</code>\xe2\x80\x99s leafs indexes validity,BfReturns true iff this element is zero.00CcKeeps track of the last time a connection was made.CnGet length of the longest common prefix bits for the given \xe2\x80\xa6CkReturns the number of transaction gas usage metrics stored.CmAuxiliary function to listen for linenoise input line and \xe2\x80\xa6CnRearranges the internal storage of this deque so it is one \xe2\x80\xa6AlPeer malicious message countCeMessages buffer for better downstream prints handlingClAsync task to generate and mine provided fork index next \xe2\x80\xa6BmAsync task to monitor network disconnections.CmAuxiliary function to ask all peers for their current tip \xe2\x80\xa6CmCompute the next mining difficulty, based on current ring \xe2\x80\xa6CbOneshot send a given JSON-RPC request over the \xe2\x80\xa6CnMake a best effort guess from the most frequently reported \xe2\x80\xa6C`Remove all records from the store\xe2\x80\x99s sync tree.ClAsync task to start the consensus task, while monitoring \xe2\x80\xa6BhReset the DAO Merkle trees in the cache.BbReset all DAO votes in the wallet.CkReset the Money nullifiers Sparse Merkle Tree in the cache.ClAuxiliary function to reset the blockchain and consensus \xe2\x80\xa6ClAuxiliary function to reset the validator blockchain and \xe2\x80\xa6CjReset state to provided block height. If genesis block \xe2\x80\xa6DaResets the [<code>ExplorerDb::blockchain::blocks</code>] and [\xe2\x80\xa6CmAuxiliary function to retrieve blocks of provided headers \xe2\x80\xa6AkJSON-RPC connection tracker000AdRun the accept loop.DfWrapper function around <code>accept()</code> to take the incoming \xe2\x80\xa6DhSends the encoded payload of provided <code>SerializedMessage</code> \xe2\x80\xa6AnGet pointer to inbound sessionCcReference to configured <code>InboundSession</code>EgWrites data to the <code>contract_return_data</code> field of <code>Env</code>. The \xe2\x80\xa6DkCalls the <code>set_return_data</code> WASM function. Returns Ok(()) on \xe2\x80\xa6BcSpend hook for the party\xe2\x80\x99s outputCnAuxiliary function to stop current JSON-RPC client, if its \xe2\x80\xa6ClStores an address on a hostlist or updates its last_seen \xe2\x80\xa6BePublisher listening for store updatesCiGet notified when new hosts have been inserted into a \xe2\x80\xa6EjTransposes a <code>Value&lt;[V; LEN]&gt;</code> into a <code>[Value&lt;V&gt;; LEN]</code>.D`Round down to power of two. Should error for count &lt; 3 or \xe2\x80\xa6BaThe blinding factor for user_dataCeVerifies that the file hash matches the chunk hashes.DdVerify given <code>Proposal</code> against provided consensus state.A`Vote nullifiers,ClInternal write function that writes a JSON-RPC object to \xe2\x80\xa6AhCommitment for yes votesAdWeighted vote commitC`Gas consumed across all zk circuit computations.BoArithmetic instructions implemented in the chipCjA struct that can fetch and store recent Bitcoin block \xe2\x80\xa6CmThis is a description of the circuit environment, such as \xe2\x80\xa6CgAuxiliarry structure containing all the information \xe2\x80\xa6CfRepresents contract metadata containing additional \xe2\x80\xa6ChA <code>DaoProposalBulla</code> represented in the stateBhParameters for <code>Dao::Propose</code>BjState update for <code>Dao::Propose</code>DjSpecial iterator of a <code>DarkTree</code>, performing DFS post-order \xe2\x80\xa6CmStructure to hold a JSON-RPC client and its config, so we \xe2\x80\xa6ChA RPC client for interacting with a Darkfid JSON-RPC \xe2\x80\xa6BgAllowed timestamp drift in millisecondsBhElliptic curve fixed point in base fieldDhStructure representing the response to <code>ForkSyncRequest</code>, \xe2\x80\xa6DcTrait for constructing a <code>PrimeField</code> element from a \xe2\x80\xa6AfGenesis event contentsBlPeriodically probes entries in the greylist.CbInstance provided exceeds number of available rowsCkThe provided instances do not match the circuit parameters.AnA JSON-RPC notification objectBg$\\ell^\\mathsf{Orchard}_\\mathsf{Merkle}$Bg$\\ell^\\mathsf{Orchard}_\\mathsf{scalar}$ClGeneric publish/subscribe class that maintains a list of \xe2\x80\xa6CkStructure representing metrics extracted from the database.BfParameters for <code>Money::Fee</code>BhState update for <code>Money::Fee</code>BdAttempt to overwrite a default valueCdAffine representation of an elliptic curve point \xe2\x80\xa6BbAtomic pointer to sled db overlay.AgSparse merkle tree pathCnCalculate sparse Merkle root, given the position, path and \xe2\x80\xa6AnThe Sparse Merkle Tree struct.CkA vector of all currently accepted transports and valid \xe2\x80\xa6AkVerack message fields size:AcWIF checksum lengthDjPanics if the circuit being checked by this <code>MockProver</code> is \xe2\x80\xa6BjAggregated blinds for the vote commitmentsCgCompute the number of blinding factors necessary to \xe2\x80\xa6CgReceive send requests and rate-limit broadcasting them.CnTo apply the rate-limit, we don\xe2\x80\x99t broadcast directly but \xe2\x80\xa6CjConstruct <code>Cell</code>s by deserializing bytes slice.CnWait for all new channels created by the acceptor and call \xe2\x80\xa6CgVector of indexes showcasing this leaf\xe2\x80\x99s children \xe2\x80\xa6ClAllocate a new complex selector that can appear anywhere \xe2\x80\xa6CaBuild current contract states checksums monotree.ClCheck if the store\xe2\x80\x99s pending txs tree contains a given \xe2\x80\xa6BiThe compiled wasm bincode being executed,BcThe contract section being executedChCreate the <code>Fee_V1</code> ZK proof given parametersCdCreate a generic <code>Dao::Exec</code> transaction.AoExecute a DAO generic proposal.ClDarkfi blockchain node endpoint to sync with when not in \xe2\x80\xa6CmThe values encrypted with the derived shared secret using \xe2\x80\xa6ChFilter given addresses based on certain rulesets and \xe2\x80\xa6AiOptional fixed difficultyCnInterpret a string of numbers as a (congruent) prime field \xe2\x80\xa6ChConverts from pallas::Scalar to pallas::Base (aka $x \xe2\x80\xa6CkGenerate a deterministic genesis event corresponding to \xe2\x80\xa6CjRetrieve all transactions locations from the store\xe2\x80\x99s \xe2\x80\xa6CjWill return currently configured block time target, in \xe2\x80\xa6CjEveryone can call this. Will return runtime configured \xe2\x80\xa6CkQueries darkfid for currently configured block target time.EgRetrieve all <code>BlockInfo</code> for given slice of <code>Block</code>. Fails if \xe2\x80\xa60Bc<code>key</code> -&gt; bucket indexBaReturn <code>current_file</code>.AlFetch a DAO given its bulla.CfAuxiliary function to retrieve the fork headers of \xe2\x80\xa6CnFetch given tx hash location from the overlay\xe2\x80\x99s location \xe2\x80\xa6CcGenerate a Merkle proof for the given root and key.CmRetrieve an object from the object store specified by the \xe2\x80\xa6CgInternal function, get raw bytes from the objects storeBeReturn <code>self.selector_map</code>CfRetrieves all the source file paths associated for \xe2\x80\xa6CaFetches all known transactions from the database.CiAuxiliary function to define the alias add subcommand \xe2\x80\xa6CfAuxiliary function to define the broadcast command \xe2\x80\xa6DgProtocol function handling <code>EventPut</code>. This is triggered \xe2\x80\xa6DgProtocol function handling <code>EventReq</code>. This is triggered \xe2\x80\xa6CfAuxiliary function to define the subscribe command \xe2\x80\xa6CfI2p Socks5 proxy to connect to i2p eepsite (hidden \xe2\x80\xa60CfImport blacklisted peers specified in the config file.CeInitialize wallet with tables for the Money contract.EgInserts provided <code>u32</code> height and <code>GasMetrics</code> pairs into the \xe2\x80\xa6CbJoin a path with <code>config_dir()/darkfi</code>.C`List contract deploy authorities from the walletCnStart a JSON-RPC server bound to the givven accept URL and \xe2\x80\xa6CnMarks all coins in the wallet as spent, if their nullifier \xe2\x80\xa6CbMerkle root for the input\xe2\x80\x99s coin inclusion proofCkTransports allowed to be mixed (tcp, tcp+tls, tor, tor+tls)0Bk<code>Money::PoWReward</code> functionalityAmCompute the next mine target.AoDAO notes decryption public keyAoDAO notes decryption secret keyClNym socks5 proxy to connect to when socks5 or socks5+tls \xe2\x80\xa60CiOutbound connections session. Manages the creation of \xe2\x80\xa6AjOur own deploy authoritiesDaAuxiliary function to parse a <code>DAO_DAOS_TABLE</code> record.CmAuxiliary function to grab all the nullifiers, coins with \xe2\x80\xa6CmAuxiliary function to parse provided string into a tokens \xe2\x80\xa6CmAuxiliary function to parse provided string into a values \xe2\x80\xa6BnProtocol for address and get-address messages.CiGeneric protocol to receive specified structure messages.ClProtocol for version information handshake between nodes \xe2\x80\xa6DgGive the path leading from the leaf at <code>index</code> up to the \xe2\x80\xa6BjImport given DAO proposal into the wallet.ClInternal read function that reads from the active stream \xe2\x80\xa6BnAdd a channel to the set of connected channelsChRegisters a new channel with the session. Performs a \xe2\x80\xa6BmRemove an entry from a hostlist if it exists.BiReset the Money Merkle tree in the cache.BgAuxiliary function to reset PoW module.CdReset the transaction history records in the wallet.CnAuxiliary function to retrieve headers backwards until our \xe2\x80\xa6CiSapling key agreement for note encryption. Implements \xe2\x80\xa6ClSeed sync session creates a connection to the seed nodes \xe2\x80\xa6AoGet pointer to outbound sessionCdReference to configured <code>OutboundSession</code>AoGet pointer to seedsync sessionCdReference to configured <code>SeedSyncSession</code>BnSet <code>DarkTreeLeaf</code>\xe2\x80\x99s parent indexAkPublic key used for signing0ClPublic key for the signature. The signature ensures this \xe2\x80\xa6BcPublic key used to sign transactionCkCaller\xe2\x80\x99s public key, corresponding to the one used in \xe2\x80\xa60AlPublic key for the signature0CaThe ephemeral secret key created for tx signiningCiSort <code>nodes</code> by distance from <code>key</code>ClSubscribes to darkfid\xe2\x80\x99s JSON-RPC notification endpoint \xe2\x80\xa6DbSubscribes to new blocks from the <code>darkfid</code> daemon, \xe2\x80\xa6ClTor socks5 proxy to connect to when socks5 or socks5+tls \xe2\x80\xa60BeTotal size (in bytes) of the resourceAkTransaction hash identifierCcUpdate the last_seen field of a peer on a hostlist.AmValidate certificate DNSName.CjVerify if resources are complete and uncorrupted. If a \xe2\x80\xa6AkDAO votes viewer public keyAkDAO votes viewer secret keyC`Async task to wait for listener\xe2\x80\x99s stop signal.BdHandler waits for termination signal00DkCall this before <code>Proof::create()</code> to perform type checks on \xe2\x80\xa60CkAn encrypted note using Diffie-Hellman and ChaCha20Poly1305DeDomain prefix used for block hashes, with <code>hash_to_curve</code>.CjOverlay structure over a <code>BlockStore</code> instance.CjOverlay structure over a <code>Blockchain</code> instance.CaA <code>TableColumn</code> has not been assigned.CjConstrain a Base field element to a circuit\xe2\x80\x99s public \xe2\x80\xa6CjAmount of max items(blocks) to use for next difficulty \xe2\x80\xa6AnDarkfid P2P protocols handler.CaDefault JSON-RPC <code>RequestHandler</code> typeCcStruct holding necessary information to build a \xe2\x80\xa6B`Elliptic curve fixed point shortCgMessage representing a directory reply from the networkCfMessage representing a find nodes reply on the networkCkStructure represening a request to ask a node for up to \xe2\x80\xa6CnAn exponent to perform inverse of x^3 on prime field based \xe2\x80\xa6BiContract ID for the native money contractCmThe marginal size of a Halo 2 proof, broken down into its \xe2\x80\xa6CjA dispatcher that is unique to every <code>Message</code>.BkNumber of windows for a short signed scalarCjDefines a common interface for multiple peer discovery \xe2\x80\xa6DjHandler managing <code>Transaction</code> messages, over a generic P2P \xe2\x80\xa6BlInverse of <code>Self::ROOT_OF_UNITY</code>.BdGeneric serialized message template.DgInternal Tor Listener implementation, used with <code>PtListener</code>D`Structure representing a <code>TRANSACTIONS_TABLE</code> record.CgWe need a convenience method from Rust\xe2\x80\x99s unstable \xe2\x80\xa6AlVersion message fields size:ClAppend provided block difficulty to the ring buffers and \xe2\x80\xa6DaApply given <code>Transaction</code> to the provided overlay. \xe2\x80\xa6CmAppend data related to DAO contract transactions into the \xe2\x80\xa6CdProvides the average of the gas used across WASM \xe2\x80\xa6CmConvert (bytes slice + Range) representation into bits in \xe2\x80\xa6BkPublisher for notifications of new channelsCiBuilds a dot graph string representing the given circuit.AkExtra field of the coinbaseCnNetwork address of the node receiving this message (before \xe2\x80\xa6CiStores, manages, and provides access to contract metadataCeCreate a transfer <code>Dao::Exec</code> transaction.B`Execute a DAO transfer proposal.CnMinimal threshold of participating total tokens needed for \xe2\x80\xa6BdSend and receive version informationDkExecute the transaction created by <code>deploy_contract()</code> for a \xe2\x80\xa6CnThe generic handler for <code>ForkSyncRequest</code> messages.ChAttempts to convert a byte representation of a field \xe2\x80\xa6CmFetch n transactions after given order([order..order+n)). \xe2\x80\xa6CfFetch a block given its header hash from the database.CmFetch all known DAO proposals from the wallet given a DAO \xe2\x80\xa6CkCompute the starting position of the file (in bytes) by \xe2\x80\xa6BfReturn <code>self.fixed_queries</code>BmGet the index for a given addr on a hostlist.BhFetch the last N records from order treeBfFetch all secret keys from the wallet.BfReturn <code>self.num_selectors</code>DjFetches the <code>BlockInfo</code> associated with a given transaction \xe2\x80\xa6CjAuxiliary function to define the alias show subcommand \xe2\x80\xa6CgAuxiliary function to define the attach fee command \xe2\x80\xa6CjAuxiliary function to define the dao create subcommand \xe2\x80\xa6CjAuxiliary function to define the dao import subcommand \xe2\x80\xa6BkBackground handler function for ProtocolTx.CjAuxiliary function to define the token list subcommand \xe2\x80\xa6CjAuxiliary function to define the token mint subcommand \xe2\x80\xa6CcInitialize wallet with tables for <code>Drk</code>.BeThe value blind created for the inputCmGenerate the sled batch corresponding to an insert to the \xe2\x80\xa6DgInsert a slice of <code>BlockDifficulty</code> into the overlay\xe2\x80\x99s \xe2\x80\xa6DeInsert a slice of <code>BlockDifficulty</code> into the store\xe2\x80\x99s \xe2\x80\xa6CfReturns true if call is a money over-the-counter swap.BiReturns true if call is a money transfer.AoRetrieve the last block height.CnConverts a leaf position to the internal BigUint index for \xe2\x80\xa6ClAsync task to listen for incoming proposals and check if \xe2\x80\xa6ClRun the receive loop. Start receiving messages or handle \xe2\x80\xa6CnGeneric publish/subscribe class that can dispatch any kind \xe2\x80\xa6CiReturns the inner <code>MessageSubsystem</code> referenceBoThe message subsystem instance for this channelDeHolder\xe2\x80\x99s instance of the Merkle tree for the <code>Money</code> \xe2\x80\xa6DhAuxiliary function to parse a <code>MONEY_COINS_TABLE</code> record. \xe2\x80\xa6EbParses a <code>JsonValue</code> parameter into a <code>f64</code>. Returns the \xe2\x80\xa6EeParses a <code>JsonValue</code> parameter into a <code>String</code>. Returns the \xe2\x80\xa6BoPing configured miner daemon JSON-RPC endpoint.AmThe updated proposal metadataCgThe generic handler for <code>Proposal</code> messages.BaBlock proposal broadcast protocolCdReturn a reference to the internal protocol registryAaProtocol registryCaInterface for registering arbitrary P2P protocolsCnThe node removes invalid transactions from the pending txs \xe2\x80\xa6BhReturn the queried selectors in the gateCksmol::fs::File::read does not guarantee that the buffer \xe2\x80\xa60CnGenerate the sled batch corresponding to a remove from the \xe2\x80\xa6DdResets gas metrics in the <code>SLED_GAS_METRICS_TREE</code> and \xe2\x80\xa6DjResets the gas metrics in the store to a specified <code>height</code> \xe2\x80\xa6BdReset the Money coins in the wallet.CmNetwork address of the node receiving this message (after \xe2\x80\xa6ClSerialize contract payload to the format accepted by the \xe2\x80\xa6CcPerform network handshake for message subsystem \xe2\x80\xa6BmThe ephemeral secret keys created for signing0AlSmall range check, 0..8 bitsAmSort a hostlist by last_seen.EbHolder\xe2\x80\x99s set of spent <code>OwnCoin</code>s from the <code>Money</code> contractC`Get notified when a new channel has been createdBcData (in bytes) we want to downloadCmThe number of transactions included in this Monero block. \xe2\x80\xa6ClMerkle tree root of the transactions hashes contained in \xe2\x80\xa60C`Unknown proposals queue to be checked for reorg.B`The set of unreferenced DAG tipsCfVerify provided block corresponds to next mine target.CgVerify provided difficulty corresponds to the next one.CiReturns a copy of this circuit with no witness values \xe2\x80\xa6BmDerivation prefix for <code>ContractId</code>ClConstrain equality of two Base field elements inside the \xe2\x80\xa6CmA constraint was active on an unusable row, and is likely \xe2\x80\xa6CjRepresents a source file containing its file path as a \xe2\x80\xa6CcDomain prefix used for Schnorr signatures, with \xe2\x80\xa6AmInput for a DAO proposal voteCkStructure represening a request to ask a node for up to \xe2\x80\xa6CkOverlay structure over a <code>HeaderStore</code> instance.DjStructure representing the response to <code>HeaderSyncRequest</code>, \xe2\x80\xa6BoMaximum command (message name) length in bytes.ChA whole-program constraint in HashX failed, and this \xe2\x80\xa6C`P2P protocol implementation for the Event Graph.DfAuxiliary structure to build a full <code>Transaction</code> using \xe2\x80\xa6CfValid EcFixedPoint constant names supported by the VM.BdThe data needed to verify a fud PoW.AlRolling length of the windowCgWhitelisted network transports for outbound connectionsBmPreferred transports for outbound connectionsCmBackground task that announces our files once every hour. \xe2\x80\xa6DkApply given set of <code>Transaction</code> in sequence, without formal \xe2\x80\xa6Bg<code>Money::AuthTokenMintV1</code> APIBkProvides the average of the total gas used.CnElectrum nodes used to fetch the latest block hashes (used \xe2\x80\xa60CdCheck if configured max capacity have been exceeded.0ChCheck if configured min capacity have not been exceeded.0CcIncomplete hashed state of the coinbase transactionDfConstrains a <code>Cell</code> to equal an instance column\xe2\x80\x99s row \xe2\x80\xa6DcIndex of the currently opened file in the <code>files</code> vector0DcHolder\xe2\x80\x99s instance of the Merkle tree for the <code>DAO</code> \xe2\x80\xa6BoThe DAO Merkle tree containing proposals bullasCmGenerate a new deploy authority keypair and place it into \xe2\x80\xa6CiChecks the contained value for an error condition, if \xe2\x80\xa6ChGet up to limit peers that match the given transport \xe2\x80\xa6CiGiven a proposal, find the fork chain it extends, and \xe2\x80\xa6DaProvides a <code>DateTime</code> instance from a string in \xe2\x80\x9c\xe2\x80\xa6CmReturns a field element that is congruent to the provided \xe2\x80\xa6BgReturn <code>self.advice_queries</code>CfRetrieve all block difficulties from the store\xe2\x80\x99s \xe2\x80\xa6DjRetrieve <code>BlockInfo</code>s by given hashes. Fails if any of them \xe2\x80\xa60CjReturn all chunks that contain parts of <code>file</code>.CnFetches the total contract count of all deployed contracts \xe2\x80\xa6ChAuxiliary function to retrieve the fork proposals of \xe2\x80\xa6BmRetrieve n headers before given block height.BlFetches the most recent gas metrics from \xe2\x80\xa6DfFetches the most recent <code>GasMetrics</code> and its associated \xe2\x80\xa6BgReturn <code>self.minimum_degree</code>ChReturns the network configuration for specified network.CnFetches the blocks within a specified range of height from \xe2\x80\xa6CmReturns the number of bytes we want from a chunk (depends \xe2\x80\xa6CdReturns the list of selected files (absolute paths).BgGet sorted indices from unsorted slice.EgRetrieves a source content as a <code>String</code> given a <code>ContractId</code> \xe2\x80\xa6ClGenerate a Monotree(SMT) containing all contracts states \xe2\x80\xa6000AnNumber of goldlist connections0AkProcesses an incoming chunkChAuxiliary function to define the completions command \xe2\x80\xa6CkAuxiliary function to define the dao balance subcommand \xe2\x80\xa6CkAuxiliary function to define the otc inspect subcommand \xe2\x80\xa6ChAuxiliary function to define the unsubscribe command \xe2\x80\xa6CkAuxiliary function to define the wallet tree subcommand \xe2\x80\xa6BgThe value blinds created for the inputs0AjInput\xe2\x80\x99s value commitmentCmGenerate the sled batch corresponding to an insert to the \xe2\x80\xa6EhAdds the provided <code>TransactionHash</code> and <code>GasData</code> pairs to the \xe2\x80\xa6ClAdds gas metrics for a specific block of transactions to \xe2\x80\xa6EhInserts <code>TransactionHash</code> and <code>GasData</code> pairs into the store\xe2\x80\x99\xe2\x80\xa6CnLogs a banner displaying the startup details of the DarkFi \xe2\x80\xa6BfMake a simple anonymous transfer call.ClCalculate the midnight timestamp given a number of days. \xe2\x80\xa6B`HTTP JSON-RPC connection trackerBm<code>Money::GenesisMint</code> functionalityCcField-native range check gadget with a lookup tableBfThe value blind created for the outputCbAuxiliary function to parse a proposal record row.CiRemove a given slice of pending transactions from the \xe2\x80\xa6CnRemoves channel from the list of connected channels when a \xe2\x80\xa6CcResets transactions in the database by clearing \xe2\x80\xa6CnSets the minimum degree required by the circuit, which can \xe2\x80\xa6BoGas used for creating the transaction signatureCgAuxiliary function to compute a blake3 checksum for \xe2\x80\xa6DiThe <code>sled</code> tree storing each blocks\xe2\x80\x99 full database state \xe2\x80\xa60DfConverts a <code>ContractId</code> into a <code>ContractRecord</code>.AfTotal number of chunksCjVerify WASM execution, signatures, and ZK proofs for a \xe2\x80\xa6DkSince <code>Lilith</code> does not make outbound connections, if a peer \xe2\x80\xa6CiConstrain equality of two EcPoint elements inside the \xe2\x80\xa6BmMetadata for a DAO proposal on the blockchainDkStructure representing the response to <code>ForkHeadersRequest</code>, \xe2\x80\xa6ChMessage representing a find nodes request on the networkChMessage representing a find seeders reply on the networkAmGetAddrs message fields size:CkProvides a unified method for creating new instances of \xe2\x80\xa6CfMalicious behaviour threshold. If the threshold is \xe2\x80\xa6CkHandles message subscriptions through a subscription ID andDfThe <code>MetricsStoreOverlay</code> provides write operations for \xe2\x80\xa6AoPing-Pong messages fields size:DiHandler managing all <code>ProtocolSync</code> messages, over generic \xe2\x80\xa6BcRatelimit kicks in above this countEeA helper type that augments a <code>FloorPlanner</code> with <code>tracing</code> \xe2\x80\xa6CcStruct holding necessary information to build a \xe2\x80\xa60BfA Table has columns of uneven lengths.DcAdds source code for a specified <code>ContractId</code> from a \xe2\x80\xa6DkAuxiliary function to apply <code>DaoFunction::Exec</code> call data to \xe2\x80\xa6DkAuxiliary function to apply <code>DaoFunction::Mint</code> call data to \xe2\x80\xa6DkAuxiliary function to apply <code>DaoFunction::Vote</code> call data to \xe2\x80\xa6CkAppend data related to Money contract transactions into theCmThe ratio of winning/total votes needed for a proposal to \xe2\x80\xa6CkThe coinbase must be the first transaction in the block, soCmSync the node consensus state and start the corresponding \xe2\x80\xa6CjStore for managing contract metadata, source code, and \xe2\x80\xa6ClCreates a Merkle proof for the given hash within the set \xe2\x80\xa6CgCreate a generic <code>Dao::Propose</code> transaction.AnCreate a DAO generic proposal.CeSmart contract implementing Anonymous DAOs on DarkFi.CmConvert concatenated BTC block headers to a list of block \xe2\x80\xa6AhGas used for deploymentsDiExecute the transaction made by <code>dao_exec_*()</code> for a given \xe2\x80\xa6DjExecute the transaction created by <code>dao_mint()</code> for a given \xe2\x80\xa6DgExecute the transaction made by <code>dao_vote()</code> for a given \xe2\x80\xa6DjExecute the transaction created by <code>otc_swap()</code> for a given \xe2\x80\xa6EcExecute a <code>Money::Transfer</code> transaction for a given <code>Holder</code>.CiExport witness.json which can be used by zkrunner for \xe2\x80\xa60CmFetch all the events that are on a higher layers than the \xe2\x80\xa6D`Sled tree containing \xe2\x80\x9cresource hash -&gt; file selection\xe2\x80\x9d\xe2\x80\xa6AjGenerate a new empty fork.CjAuxiliary function to generate next block in an atomic \xe2\x80\xa6DdFetches the latest <code>BaseStatistics</code> from the explorer \xe2\x80\xa6CjRetrieves a block from at a given height returning the \xe2\x80\xa6CaFetch a block given its height from the database.ClWill return current blockchain timestamp, defined as the \xe2\x80\xa6CjEveryone can call this. Will return current blockchain \xe2\x80\xa6DjRetrieve <code>Header</code>s by given hashes. Fails if any of them is \xe2\x80\xa6CnFetch the last record in the difficulty tree, based on the \xe2\x80\xa6ClReturns the (sub)set of chunk hashes in a ChunkedStorage \xe2\x80\xa6ClAuxiliary function to define the alias remove subcommand \xe2\x80\xa6ClAuxiliary function to define the dao proposal subcommand \xe2\x80\xa6ClAuxiliary function to define the token freeze subcommand \xe2\x80\xa6ClAuxiliary function to define the token import subcommand \xe2\x80\xa6ClAuxiliary function to define the wallet coins subcommand \xe2\x80\xa6DfAdd files metadata to <code>hasher</code>. You must sort the files \xe2\x80\xa6CeImport witness.json which can be used to debug or \xe2\x80\xa60CeInbound connection slots number, this many active \xe2\x80\xa6AoInbound connection slots numberBbEncrypted user data for input coinClExecute an atomic sled batch corresponding to inserts to \xe2\x80\xa6BkReturns true if call is a money PoW reward.BkReturns true if call is a money token mint.ChAuxiliary function that logs RPC request failures by \xe2\x80\xa6CmAllocates a new fixed column that can be used in a lookup \xe2\x80\xa6ChReturns the marginal proof size per instance of this \xe2\x80\xa6CeMarks cells involved in equality constraints, in red.CkMoney merkle tree snapshot for reproducing the snapshot \xe2\x80\xa6D`Normalizes the given <code>DateTime</code> to the start of hour.DcNormalizes a given <code>Timestamp</code> to the start of the hour.ChPublish a message to all listening subscriptions but \xe2\x80\xa6BhThe value blinds created for the outputs0AgOutput value commitmentCaOur own coins nullifiers and their leaf positionsClAuxiliary function to parse a base64 encoded transaction \xe2\x80\xa60AgThe proposal auth callsB`DAO proposals creator public keyB`DAO proposals creator secret keyCmRemove the transaction history records in the wallet that \xe2\x80\xa6BfReset all DAO proposals in the wallet.CdSet provided index address as default in the wallet.BdNumber of chunks we want to downloadEdHolder\xe2\x80\x99s set of unspent <code>OwnCoin</code>s from the <code>Money</code> contractClRetrieve all existing blocks and try to apply them to an \xe2\x80\xa6CiA blockchain is considered valid, when every block is \xe2\x80\xa6DjVerify a set of <code>Transaction</code> in sequence and apply them if \xe2\x80\xa6BaGas used by ZK circuit operationsBeAtomic pointer to blockchain overlay.CmOverlay structure over a <code>ContractStore</code> instance.CdAtomic pointer to the Darkfid P2P protocols handler.CkAn encrypted note using an ElGamal scheme verifiable in ZK.CkStructure represening a request to ask a node for up to \xe2\x80\xa6CcStruct holding necessary information to build a \xe2\x80\xa6CfAtomic pointer to the <code>ProtocolTx</code> handler.ClSample point used to calculate sleep time when ratelimit \xe2\x80\xa62CjTrait representing a strategy for verifying Halo 2 proofs.CkAppend data related to DeployoOor contract transactions \xe2\x80\xa6Bi<code>Money::AuthTokenFreezeV1</code> APICgState update produced by a smart contract function callCkCustom implementation of rusqlite::named_params! to use \xe2\x80\xa6ChCreate a transfer <code>Dao::Propose</code> transaction.AoCreate a DAO transfer proposal.AnWe do a non-recursive DFS (\xe2\x80\xa6BkPublisher listening for network disconnectsChFetch the current BTC height using an Electrum node RPC.DaThe generic handler for <code>ForkHeadersRequest</code> messages.CnAsync task used for purging erroneous pending transactions \xe2\x80\xa6CjAuxiliary function to generate provided shell completions.CeAuxiliary function to generate a Money::PoWReward \xe2\x80\xa6CjAuxiliary function to retrieve the fork header hash of \xe2\x80\xa6BiReturn <code>self.instance_queries</code>CaFetch all token mint authorities from the wallet.ChRetrieves all native contracts (DAO, Deployooor, and \xe2\x80\xa6CnRetrieve provided key value bytes from a contract\xe2\x80\x99s zkas \xe2\x80\xa6CmAuxiliary function to define the contract list subcommand \xe2\x80\xa6CmAuxiliary function to define the contract lock subcommand \xe2\x80\xa6CmAuxiliary function to define the dao proposals subcommand \xe2\x80\xa6CcHandles receiving the address message. Loops to \xe2\x80\xa6CmAuxiliary function to define the wallet keygen subcommand \xe2\x80\xa6BhAdd chunk hashes to <code>hasher</code>.ClInternal write function that writes a JSON-RPC object to \xe2\x80\xa6ChImport given secret keys into the wallet. If the key \xe2\x80\xa6CmGenerate the sled batch corresponding to an insert to the \xe2\x80\xa6DeInsert a slice of <code>TransactionHash</code> into the store\xe2\x80\x99s \xe2\x80\xa6DgInsert a <code>u32</code> and a block hash into overlay\xe2\x80\x99s scanned \xe2\x80\xa6CbChecks if transaction gas data metrics are stored.BnReturn the Jacobian coordinates of this point.BbRetrieve the last block timestamp.CgAuxiliary function to execute a request towards the \xe2\x80\xa6CiReturn the most frequent element in vec or just any item.CkOutbound connection slots number, this many connections \xe2\x80\xa6B`Outbound connection slots numberBoOptional fixed difficulty, for testing purposesAoDAO proposals viewer public keyAoDAO proposals viewer secret keyBfStart receiving messages with timeout.CnGenerate the sled batch corresponding to a remove from the \xe2\x80\xa6DkRemove a slice of <code>u64</code> from the store\xe2\x80\x99s pending txs order \xe2\x80\xa6CbReset all contracts history records in the wallet.CkResets the explorer state to the specified height. If a \xe2\x80\xa6CjReset the scanned blocks information records in the cache.BeRevert to current overlay checkpoint.AiDisabled JSON-RPC methodsClRun a task until it has fully completed, irrespective of \xe2\x80\xa6C`Set <code>DarkTreeLeaf</code>\xe2\x80\x99s children indexCkSet the memory page size. Returns the previous memory size.C`Start accepting connections for inbound session.CjNotify the peer discovery task to start it. The direct \xe2\x80\xa6CjGet notified when a node has no active connections (is \xe2\x80\xa6BcKeypair for arbitrary token mintingCmReset confirmed DAOs in the wallet that were minted after \xe2\x80\xa6BgUser data blind for the party\xe2\x80\x99s inputBiVerify provided block timestamp and hash.CoVerify given <code>Proposal</code> against provided fork state.DdVerify given genesis <code>BlockInfo</code>, and apply it to the \xe2\x80\xa6CkConstBaseFieldElement is used in scalar mul with a base \xe2\x80\xa6ClRepresents a single or multiple blinded votes. These can \xe2\x80\xa6AhInput for a DAO proposalChPrecalculated root hash for a tree containing only a \xe2\x80\xa6CiStruct representing the configuration for an explorer \xe2\x80\xa6ChStructure represening a request to ask a node a fork \xe2\x80\xa6DkStructure representing the response to <code>ForkProposalsRequest</code>\xe2\x80\xa6CjMessage representing a find seeders request on the networkBk64-bit identifier for message subscription.CfStruct representing metering configuration parameters.DkParameters for <code>Money::Transfer</code> and <code>Money::OtcSwap</code>DmState update for <code>Money::Transfer</code> and <code>Money::OtcSwap</code>CnThe Orchard fixed bases used in scalar mul with full-width \xe2\x80\xa6ClMinimal representation of a verification key that can be \xe2\x80\xa6C`Defines generic messages protocol action signal.AlRolling length of the windowAfGas metrics tree name.AoTransaction gas data tree name.CcReturns the currently active network configuration.DeApply provided set of <code>BlockInfo</code> without doing formal \xe2\x80\xa6ClAdds provided <code>ContractId</code> with corresponding \xe2\x80\xa6DiValidate a set of <code>Transaction</code> in sequence and apply them \xe2\x80\xa6CiAuxiliary function to retrieve current best fork last \xe2\x80\xa6CnCalculates the gas data for a given transaction, returning \xe2\x80\xa6AlCoinbase Merkle proof hashesCmThe circuit is given an opportunity to describe the exact \xe2\x80\xa6DgCreate an empty transaction that includes a <code>Money::Fee</code> \xe2\x80\xa6ChHeight cumulative difficulty (total + height difficulty)CnTotal blocks cumulative difficulty Note: we keep this as a \xe2\x80\xa6AeDarkFi Money ContractCdDAO strongly supported proposals executor public keyCdDAO strongly supported proposals executor secret keyDfExecute the transaction created by <code>token_mint()</code> for a \xe2\x80\xa6DiGenerate a <code>SELECT</code> query for provided table from selected \xe2\x80\xa6ClRetrieve all transactions from the store\xe2\x80\x99s pending txs \xe2\x80\xa6DkRetrieve <code>BlockInfo</code>s by given heights. Does not fail if any \xe2\x80\xa6DaRetrieve <code>Block</code>s by given hashes and return their \xe2\x80\xa6EhFetches <code>ContractMetaData</code> for a given <code>ContractId</code>, returning \xe2\x80\xa6DfGrabs last block from the <code>Blockchain</code> overlay and then \xe2\x80\xa6CiOnly exec() can call this. Will return last block height.CiAuxiliary function to compute forks\xe2\x80\x99 next block height.CbQueries darkfid for current best fork next height.BeChannel ID -&gt; <code>DhtNode</code>BjReturn <code>self.num_fixed_columns</code>CmProvides the transaction count of all the transactions in \xe2\x80\xa6BaGet a transaction history record.CnAuxiliary function to define the dao spent hook subcommand \xe2\x80\xa6DkLogs and converts a database error into a [<code>DatabaseError</code>]. \xe2\x80\xa6CnAuxiliary function to define the wallet address subcommand \xe2\x80\xa6CnAuxiliary function to define the wallet balance subcommand \xe2\x80\xa6CnAuxiliary function to define the wallet secrets subcommand \xe2\x80\xa6BnImport a token mint authority into the wallet.CjInitialize wallet with tables for the Deployooor contract.CmGenerate the sled batch corresponding to an insert to the \xe2\x80\xa6BmReturns true if call is a money genesis mint.CmRetrieve the last block difficulty. If the tree is empty, \xe2\x80\xa6CiAuxiliary function to  grab all the nullifiers from a \xe2\x80\xa6BkManages the tasks for the network protocol.DgInsert or update a <code>Transaction</code> history record into the \xe2\x80\xa6ClSubscribes to darkfid\xe2\x80\x99s JSON-RPC notification endpoint \xe2\x80\xa6DhHelper function to convert <code>ExplorerdRpcError</code> into error \xe2\x80\xa6CjCompute all updated contracts states and wasm bincodes \xe2\x80\xa6CmValidates whether the provided JSON parameter is an empty \xe2\x80\xa6CaPercent of connections to come from the whitelistAoNumber of whitelist connectionsCmThe instance sets up a copy constraint involving a column \xe2\x80\xa6CdA constraint was not satisfied for a particular row.BnContract ID for the native Deployooor contractC`Window size for fixed-base scalar multiplicationBjStructure representing the response to \xe2\x80\xa6CcStruct holding necessary information to build a \xe2\x80\xa6CfMessage metering configuration for rate limit. Use \xe2\x80\xa6BlParameters for <code>Money::PoWReward</code>BnState update for <code>Money::PoWReward</code>BlParameters for <code>Money::TokenMint</code>BnState update for <code>Money::TokenMint</code>Cb<code>k</code> is too small for the given circuit.CfRepresents the minimal parameters that determine a \xe2\x80\xa6CkDefines a handler for generic protocol messages, consistingB`Pointer to protocol jobs managerChAtomic pointer to the <code>ProtocolSync</code> handler.BfSleep for this amount of time when \xe2\x80\xa6CjValid EcFixedPointBase constant names supported by the VM.DkAuxiliary function to apply <code>DaoFunction::Propose</code> call data \xe2\x80\xa6DhAuxiliary function to apply <code>DeployFunction::LockV1</code> call \xe2\x80\xa6AmAux chain Merkle proof hashesCjWe need to rate limit message propagation so malicious \xe2\x80\xa6CjBroadcasts a message concurrently across active peers, \xe2\x80\xa6CdCurrently configured confirmation security thresholdCaFork size(length) after which it can be confirmedDkCreate a ChunkedStorage from metadata. <code>hash</code> is the hash of \xe2\x80\xa6CgAuxiliary function to execute a request towards the \xe2\x80\xa6DiExecute the transaction created by <code>dao_propose_*()</code> for a \xe2\x80\xa6ChFind the unreferenced tips in the current DAG state, \xe2\x80\xa6DcThe generic handler for <code>ForkProposalsRequest</code> messages.BcGenerate or read cached PKs and VKsDkAuxiliary function that retrieves <code>ContractRecord</code>s filtered \xe2\x80\xa6CkGet the last scanned block height and hash from the wallet.CjFetches the latest metrics from the explorer database, \xe2\x80\xa6BkReturn <code>self.num_advice_columns</code>BkReturn <code>self.num_advice_queries</code>BgGet a scanned block information record.CmFetch given block height numbers from the store\xe2\x80\x99s state \xe2\x80\xa6ClFetch given block height number from the store\xe2\x80\x99s state \xe2\x80\xa6ClRetrieve all records from a contract\xe2\x80\x99s zkas sled tree, \xe2\x80\xa6CdAuxiliary function to define the contract deploy \xe2\x80\xa6CgRuns the message queue. We listen for the specified \xe2\x80\xa6BmBackground handler function for ProtocolSync.CkImplements default Hash, PartialEq, and Eq for a struct \xe2\x80\xa60DhInsert or update a slice of <code>Transaction</code> history records \xe2\x80\xa6CnRemove the DAO votes in the wallet that were created after \xe2\x80\xa6CiReset all token mint authorities frozen status in the \xe2\x80\xa6CjAuxiliary function to retrieve the vector of erroneous \xe2\x80\xa6CkIf this is true, strictly follow the gold_connect_count andAdAllow localnet hostsBeData (in bytes) we already downloadedCeBlock height number runtime verifies against. For \xe2\x80\xa6BnTime limit in the future of what blocks can beCmAuxiliary structure representing node consensus init task \xe2\x80\xa6BgThe constraint system is not satisfied.ClAn instance cell used in an active gate was not assigned \xe2\x80\xa6CjSWU hash-to-curve personalization for the spending key \xe2\x80\xa6DgHandler managing <code>Proposal</code> messages, over a generic P2P \xe2\x80\xa6CkValid EcFixedPointShort constant names supported by the VM.CjProvides the average of the gas used to sign transactions.ChAuxiliary function to broadcast a serialized message \xe2\x80\xa6ClCalculates the Merkle root hash from the provided Monero \xe2\x80\xa6BcRoutine checks on section structureBjCreate a DAO generic proposal transaction.CnDeploy DarkFi native wasm contracts to provided blockchain \xe2\x80\xa6CmDeploys native contracts required for gas calculation and \xe2\x80\xa6DjAuxiliary function to derive <code>TokenAttributes</code> for provided \xe2\x80\xa6DlExecute the <code>Transaction</code> created by <code>genesis_mint()</code>.DhExecute the transaction created by <code>token_freeze()</code> for a \xe2\x80\xa6CfGet up to limit peers that don\xe2\x80\x99t match the given \xe2\x80\xa6CnRetrieve all deploy history records basic information, for \xe2\x80\xa6CjFetch N records before given height from the store\xe2\x80\x99s \xe2\x80\xa6CjFetch the last N records from the store\xe2\x80\x99s difficulty \xe2\x80\xa6BlFetches a transaction given its header hash.CnAuxiliary function to handle coins with their notes from a \xe2\x80\xa6CaBackground handler function for ProtocolProposal.ClBackground task to handle an unknown proposal. Returns a \xe2\x80\xa6CeAuxiliary function to define the wallet addresses \xe2\x80\xa6CmGenerate the sled batch corresponding to an insert to the \xe2\x80\xa6DkHolder\xe2\x80\x99s instance of the SMT tree for the <code>Money</code> contract \xe2\x80\xa6CaCalculate the timestamp of the next DAG rotation.CnMoney nullifiers SMT snapshot for reproducing the snapshot \xe2\x80\xa6CbParses the element at the specified index in a \xe2\x80\xa60CjPedersen commitment for a 64-bit value, in the base field.CfRegisters a new channel sender to the handler map. \xe2\x80\xa6CkData (in bytes) we already downloaded, but only data we \xe2\x80\xa6BfNumber of chunks we already downloadedDgVerify given checkpoint <code>BlockInfo</code>, and apply it to the \xe2\x80\xa6CcStruct holding necessary information to build a \xe2\x80\xa6DgA fixed multiplicative generator of <code>modulus - 1</code> order. \xe2\x80\xa6BnParameters for <code>Money::GenesisMint</code>C`State update for <code>Money::GenesisMint</code>CjGenerator used in SinsemillaHashToPoint for IVK commitmentCjSWU hash-to-curve value for the value commitment generator0CjAuxiliary function to append a transaction to a Merkle \xe2\x80\xa6DjAuxiliary function to apply <code>DeployFunction::DeployV1</code> call \xe2\x80\xa6CeProvides the average of the gas used for deployments.CcProvides the average of the gas consumed across \xe2\x80\xa6CiThis function should only be used for testing, as PoW \xe2\x80\xa6BkCreate a DAO transfer proposal transaction.CgGiven a proposal, find the index of a fork chain it \xe2\x80\xa6DdThe generic handler for <code>ForkHeaderHashRequest</code> messages.CnTry to create a new channel until it succeeds, then notify \xe2\x80\xa6ClFetch provided contract specified token unspend balances \xe2\x80\xa6CmAuxiliary function to retrieve a fork proposals, starting \xe2\x80\xa6CjRetrieves the last confirmed block returning the block \xe2\x80\xa6BmReturn <code>self.num_instance_columns</code>CiFetch provided token unfrozen mint authority from the \xe2\x80\xa6CcAuxiliary function to define the explorer fetch \xe2\x80\xa6CmIf the FudFindRequest matches a chunk we have, handle it. \xe2\x80\xa6CjHandles receiving the get-address message. Continually \xe2\x80\xa6BlBackground task to handle unknown proposals.CfAuxiliary function to define the wallet initialize \xe2\x80\xa6CiReturns true if call is a money token mint authorization.BhOutbound connection timeout (in seconds)BkConnection establishment timeout in secondsChPedersen commitment for a full-width base field element.CjRemove the Money coins in the wallet that were created \xe2\x80\xa6CnReset all contract deploy authorities locked status in the \xe2\x80\xa6BcReverts gas metric entries from \xe2\x80\xa6CmNumber of chunks we already downloaded, but only those we \xe2\x80\xa6CnNumber of seconds with no connections after which refinery \xe2\x80\xa60ClVerify provided block timestamp is not far in the future \xe2\x80\xa6BmNative contract IDs bytes, for various checksC`Calculates set of round constants to perform \xe2\x80\xa6CbExchange versions (handshake) timeout (in seconds)C`Exchange versions (handshake) timeout in secondsBiKeypair for arbitrary contract deploymentClGenerate a new statement for provided query and bind the \xe2\x80\xa6DkExecute the transaction created by <code>create_empty_fee_call()</code> \xe2\x80\xa6ClGet a random peer from a hostlist that matches the given \xe2\x80\xa6ChFetches a list of source code file paths for a given \xe2\x80\xa6BbFetch a DAO proposal by its bulla.CjRetrieve contract deploy authorities keys map from the \xe2\x80\xa6BlFetch all scanned block information records.CkAuxiliary function to handle freezes from a transaction \xe2\x80\xa6DgInsert a slice of <code>u32</code> and block inverse diffs into the \xe2\x80\xa6DeInsert a <code>u32</code> and a block inverse diff into store\xe2\x80\x99s \xe2\x80\xa6CmParse a TOML string for any configured network and return \xe2\x80\xa6CiInsert a deploy authority history record into the wallet.ClRemove a given slice of pending transactions hashes from \xe2\x80\xa6CmSet reverted status to the transaction history records in \xe2\x80\xa6CcDraws red lines between equality-constrained cells.CkHandler background task to process unknown proposals queue.ClMark the Money coins in the wallet that were spent after \xe2\x80\xa6CgVerify block proposer signature, using the producer \xe2\x80\xa6CcStruct holding necessary information to build a \xe2\x80\xa6ClSWU hash-to-curve personalization for the IVK commitment \xe2\x80\xa6CbParameters for <code>Dao::AuthMoneyTransfer</code>BfDispatcher subscriptions HashMap type.ChSWU hash-to-curve personalization for the Merkle CRH \xe2\x80\xa6BmGeneric interface for the message dispatcher.C`Parameters for <code>Money::AuthTokenMint</code>CbState update for <code>Money::AuthTokenMint</code>ClAtomic pointer to the <code>ProtocolProposal</code> handler.DjApply given producer <code>Transaction</code> to the provided overlay, \xe2\x80\xa6CbPing-pong exchange execution interval (in seconds)C`Ping-pong exchange execution interval in secondsCiSmart contract implementing non-native smart contract \xe2\x80\xa6CjWill return current runtime configured verifying block \xe2\x80\xa6CjEveryone can call this. Will return runtime configured \xe2\x80\xa6BoPause interval within greylist refinery process0ChAuxiliary function to define the dao proposal import \xe2\x80\xa6ChAuxiliary function to define the dao propose generic \xe2\x80\xa6CmAuxiliary function to handle own coins from a transaction \xe2\x80\xa6C`Background handler function for ProtocolSyncTip.ChAuxiliary function to define the token generate mint \xe2\x80\xa6CmGenerate the sled batch corresponding to an insert to the \xe2\x80\xa6CkReturns true if call is a DAO money transfer authorization.CkReturns true if call is a money token freeze authorization.CnReturns true if contract call matches provided contract id \xe2\x80\xa6C`Calculate the time in milliseconds until the \xe2\x80\xa6DeAttempts to parse a <code>JsonResult</code>, converting it into a \xe2\x80\xa6ChAuxiliary function to rebuild the block difficulties \xe2\x80\xa6CjRegister the default network protocols for a p2p instance.CnGenerate the sled batch corresponding to a remove from the \xe2\x80\xa6CgAuxiliary function to compute a blake3 checksum for \xe2\x80\xa6CgAdds data to sparse merkle tree. The tree, database \xe2\x80\xa6CjAdd given elements into a sparse Merkle tree. Used for \xe2\x80\xa6CkReset execution information in the wallet for DAO proposalsChVerify provided block timestamp is valid and matches \xe2\x80\xa6CgAuxiliary structure representing node miner rewards \xe2\x80\xa6AlContract metadata tree name.CiThe hardcoded db name for the zkas circuits database treeCiAuxiliary function to retrieve current best fork next \xe2\x80\xa6CkGet up to n random peers that match the given transport \xe2\x80\xa6CfFetch all aliases from the wallet, mapped by token id.DkFetches the source code content for a specified <code>ContractId</code> \xe2\x80\xa6CjGet next layer along with its N_EVENT_PARENTS from the \xe2\x80\xa6CiAuxiliary function to define the contract export data \xe2\x80\xa6CiAuxiliary function to define the dao propose transfer \xe2\x80\xa6CfAuxiliary function to define the explorer simulate \xe2\x80\xa6CjAuxiliary function to define the explorer transactions \xe2\x80\xa6CkIf the FudFindRequest matches a file we have, handle it \xe2\x80\xa6CaBackground handler function for ProtocolSyncFork.DjAuxiliary function to parse a <code>MONEY_TOKENS_TABLE</code> records. \xe2\x80\xa6CnPerforms network handshake to initialize channel. Adds the \xe2\x80\xa6CkRemove the contracts history records in the wallet that \xe2\x80\xa6DgSet <code>DarkTree</code>\xe2\x80\x99s leaf parent and children indexes, and \xe2\x80\xa6CbVerify provided producer <code>Transaction</code>.BmInterval after which to check whitelist peersDkThe <code>ContractMetadataStoreOverlay</code> provides write operations \xe2\x80\xa6CcDomain prefix used for Schnorr signatures, with \xe2\x80\xa6CbParameters for <code>Money::AuthTokenFreeze</code>CdState update for <code>Money::AuthTokenFreeze</code>ClCircuit synthesis requires global constants, but circuit \xe2\x80\xa6ChFixed fee for verifying Schnorr signatures using the \xe2\x80\xa6BgInternal function used for DAG sorting.CjAuxiliary function to define the wallet import secrets \xe2\x80\xa6CgLoads native contract source code into the explorer \xe2\x80\xa6Aozkas dao exec circuit namespaceAozkas dao mint circuit namespaceDgThe time interval for <code>GasMetricsKey</code>s in the main tree, \xe2\x80\xa6Ajzkas fee circuit namespaceCmNative contract zkas circuits database trees, for various \xe2\x80\xa6CkGenerator used in SinsemillaHashToPoint for note commitmentDjValidate a producer <code>Transaction</code> and apply it if valid. In \xe2\x80\xa6DeVerify <code>DarkTree</code>\xe2\x80\x99s leaf parent and children indexes \xe2\x80\xa6DhAuxiliary function to verify provided <code>DarkLeaf</code> slice is \xe2\x80\xa6CjFetches the latest metrics from the explorer database, \xe2\x80\xa6ClFetch all state inverse diffs after given height. In the \xe2\x80\xa6CcBackground handler function for ProtocolSyncHeader.CkAuxiliary function to define the wallet default address \xe2\x80\xa6ClInternal read function that reads from the active stream \xe2\x80\xa6CjReturns true if the coinbase Merkle proof produces the \xe2\x80\xa6DjLoads <code>ContractMetaData</code> for deployed native contracts into \xe2\x80\xa6ClReset DAO proposals in the wallet that were minted after \xe2\x80\xa6DjDefault <code>MeteringConfiguration</code> as a constant, so it can be \xe2\x80\xa6Akzkas burn circuit namespaceAkzkas mint circuit namespaceClNot allowed to make proposals using snapshots with block \xe2\x80\xa6AoContract source code tree name.ClRetrieve deploy history record WASM bincode and deployed \xe2\x80\xa6ClAuxiliary function to define the explorer clear reverted \xe2\x80\xa6ClAuxiliary function to define the explorer scanned blocks \xe2\x80\xa6;CmSWU hash-to-curve personalization for the note commitment \xe2\x80\xa6DhGas metrics <code>by_height</code> tree that contains all metrics by \xe2\x80\xa6ClFetches all transactions from the database for the given \xe2\x80\xa6CmAuxiliary function to define the contract generate deploy \xe2\x80\xa6CmGenerate the sled batch corresponding to an insert to the \xe2\x80\xa6CgAuxiliary function to execute a request towards the \xe2\x80\xa6BlCompute the next mine target and difficulty.CmRemove token mint authorities frozen status in the wallet \xe2\x80\xa6CnRemove deploy authorities locked status in the wallet that \xe2\x80\xa6CjFor each message configs a threshold was calculated by \xe2\x80\xa6CnSWU hash-to-curve personalization for the value commitment \xe2\x80\xa6CiGet up to n random peers that don\xe2\x80\x99t match the given \xe2\x80\xa6CnHow many most recent blocks to use to verify new blocks\xe2\x80\x99 \xe2\x80\xa6Bdzkas dao vote main circuit namespaceBezkas dao early exec circuit namespaceBezkas dao vote input circuit namespaceChBackground handler function for ProtocolSyncForkHeaders.Bazkas token mint circuit namespaceDfAuxiliary function to verify provided <code>DarkLeaf</code> slice, \xe2\x80\xa6BdTime between peer discovery attempts0CeCooling off time for peer discovery when unsuccessful0Bgzkas dao propose main circuit namespaceCjBackground handler function for ProtocolSyncForkProposals.Bhzkas dao propose input circuit namespaceCkBackground handler function for ProtocolSyncForkHeaderHash.Bfzkas token auth mint circuit namespaceBnzkas dao auth money_transfer circuit namespaceCgzkas dao auth money_transfer encrypted coin circuit \xe2\x80\xa6")