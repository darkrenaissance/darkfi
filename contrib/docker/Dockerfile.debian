# Use: docker build . --pull --no-cache --shm-size=196m -t darkfi:debian -f ./contrib/docker/Dockerfile.debian
#   optionally with: --build-arg OS_VER=bullseye-slim --build-arg RUST_VER=nightly
#   optionally with: --build-arg BINS="darkfid  darkfid2" --build-arg DONT_EXEC_TESTS=1

ARG RUST_VER=nightly             # stable nightly beta 1.72
ARG OS_VER=bookworm-slim         # (12); bullseye-slim (11); buster-slim (10)

FROM debian:${OS_VER} as rust_builder

ARG RUST_VER

RUN apt-get update && apt-get install -y build-essential cmake jq wget \
  pkg-config clang libclang-dev llvm-dev libudev-dev libfreetype6-dev libasound2-dev \
  libexpat1-dev curl gcc make libssl-dev fonts-lato libfontconfig-dev python3-dev libsqlite3-dev \
  libsqlcipher-dev

RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain "${RUST_VER}"

ENV PATH="/root/.cargo/bin:${PATH}"

RUN rustup target add wasm32-unknown-unknown

RUN cargo search whatever  # creates .cargo cache

# 2. stage
FROM rust_builder as builder

ARG DONT_EXEC_TESTS
ARG RUST_VER
ARG BINS

WORKDIR /opt/darkfi

COPY . /opt/darkfi

RUN make clean

RUN  sed -i.bac1 's#let output = Command::new("git")#//let output = Command::new("git")#g' ./src/contract/test-harness/src/vks.rs

RUN  sed -i.bac2 's#let mut path = PathBuf::from(String::from_utf8(output\[\.\.output.len() - 1\].to_vec())?);#let mut path = PathBuf::from("/opt/darkfi");#g' ./src/contract/test-harness/src/vks.rs

RUN cargo update

RUN rm -rf ./target/ zkas proof/*.bin

RUN bash -c "if [ -z \"$DONT_EXEC_TESTS\" ]; then make test; fi"

RUN bash -c "make $BINS"

RUN mkdir -p /opt/darkfi/compiled-bins

RUN cp $(find . -maxdepth 1  -type f -executable) /opt/darkfi/compiled-bins

# 3. stage
FROM debian:${OS_VER}

RUN apt-get -y update && apt-get install -y openssl fonts-lato libout123-0 libmpg123-0 libasound2 libsqlite3-0 \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

WORKDIR /opt/darkfi

COPY --from=builder /opt/darkfi/compiled-bins/* ./
