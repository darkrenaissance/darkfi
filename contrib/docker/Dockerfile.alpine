# Use: docker build . --pull --no-cache --shm-size=196m -t darkfi:alpine -f ./contrib/docker/Dockerfile.alpine
#   optionally with: --build-arg ALPINE_VER=3.18 --build-arg RUST_VER=nightly
#   optionally with: --build-arg BINS="darkfid  darkfid2" --build-arg DONT_EXEC_TESTS=1

ARG RUST_VER=nightly             # 1.72 nightly stable
ARG ALPINE_VER=3.18              # 3.17

FROM alpine:${ALPINE_VER} as rust_builder

ARG RUST_VER
ARG ALPINE_VER

RUN apk update

RUN apk add cmake jq wget clang curl gcc make llvm-dev \
  openssl-dev expat-dev freetype-dev libudev-zero-dev \
  libgudev-dev pkgconf clang-dev fontconfig-dev bash \
  ttf-opensans musl-dev alsa-lib-dev python3-dev perl sqlite-dev
# sqlcipher seems to be in testing repo, The testing repository is only available on edge

RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain "${RUST_VER}" --default-host $(uname -m)-unknown-linux-musl

ENV PATH="/root/.cargo/bin:${PATH}"

RUN rustup target add wasm32-unknown-unknown

RUN cargo search whatever  # creates .cargo cache

# 2. stage
FROM rust_builder as builder

ARG DONT_EXEC_TESTS
ARG RUST_VER
ARG BINS

WORKDIR /opt/darkfi

COPY . ./

ARG RUSTFLAGS="-C target-feature=-crt-static"

RUN  sed -i.bac1 's#let output = Command::new("git")#//let output = Command::new("git")#g' ./src/contract/test-harness/src/vks.rs

RUN  sed -i.bac2 's#let mut path = PathBuf::from(String::from_utf8(output\[\.\.output.len() - 1\].to_vec())?);#let mut path = PathBuf::from("/opt/darkfi");#g' ./src/contract/test-harness/src/vks.rs

RUN cargo update

RUN make clean

RUN rm -rf ./target/ zkas proof/*.bin

RUN bash -c "if [ -z \"$DONT_EXEC_TESTS\" ]; then make test; fi"

RUN bash -c "make -j $BINS"

RUN mkdir -p /opt/darkfi/compiled-bins

RUN cp $(find . -maxdepth 1  -type f -executable) /opt/darkfi/compiled-bins

# 3. stage
FROM alpine:${ALPINE_VER}

RUN apk add --no-cache openssl ttf-opensans libgcc alsa-lib sqlite-libs

WORKDIR /opt/darkfi

COPY --from=builder /opt/darkfi/compiled-bins/* ./
