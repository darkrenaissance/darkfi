# Use: docker build . --pull --network=host -t darkfi:alpine -f ./contrib/docker/Dockerfile.alpine
#   optionally with: --build-arg ALPINE_VER=3.17 --build-arg RUST_VER=nightly

ARG RUST_VER=1.67
ARG ALPINE_VER=3.17

FROM alpine:${ALPINE_VER} as rust_builder

ARG RUST_VER
ARG ALPINE_VER

RUN apk update

RUN apk add cmake jq wget clang curl gcc make llvm-dev \
  openssl-dev expat-dev freetype-dev libudev-zero-dev \
  libgudev-dev pkgconf clang-dev fontconfig-dev bash \
  ttf-opensans musl-dev

RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain "${RUST_VER}" --default-host x86_64-unknown-linux-musl

ENV PATH="/root/.cargo/bin:${PATH}"

RUN rustup target add wasm32-unknown-unknown

RUN cargo search whatever  # creates .cargo cache

# 2. stage
FROM rust_builder as builder

WORKDIR /opt/darkfi

COPY . ./

ARG RUSTFLAGS="-C target-feature=-crt-static"

RUN make clean

RUN rm -rf ./target/

RUN bash -c 'make -j test &&  make -j'

# 3. stage
FROM alpine:${ALPINE_VER}

RUN apk add --no-cache openssl ttf-opensans libgcc mpg123-libs

WORKDIR /opt/darkfi

COPY --from=builder /opt/darkfi/drk /opt/darkfi/darkfid  \
   /opt/darkfi/ircd /opt/darkfi/dnetview /opt/darkfi/faucetd \
   /opt/darkfi/zkas /opt/darkfi/vanityaddr  ./
