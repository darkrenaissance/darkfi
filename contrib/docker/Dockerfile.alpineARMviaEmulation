# Beware, uses emulation, with AMD 24 threads: Building 7788.3s
# Use: docker build . --platform=linux/arm64 --pull -t darkfi:alpine_arm64 -f ./contrib/docker/Dockerfile.alpineARMviaEmulation --build-arg DONT_EXEC_TESTS=1
#   optionally with: --build-arg OS_VER=3.18 --build-arg RUST_VER=nightly

ARG RUST_VER=nightly-2023-06-21  # 1.72 beta stable nightly
ARG OS_VER=3.18                  # 3.17
ARG REPOSITORY=arm64v8/alpine

FROM --platform=$TARGETPLATFORM ${REPOSITORY}:${OS_VER} as rust_builder

ARG RUST_VER
ARG OS_VER
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM with Rust $RUST_VER"

RUN apk update

RUN apk add cmake jq wget clang curl gcc make llvm-dev \
  openssl-dev expat-dev freetype-dev libudev-zero-dev \
  libgudev-dev pkgconf clang-dev fontconfig-dev bash \
  ttf-opensans musl-dev alsa-lib-dev python3-dev perl sqlite-dev

RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain "${RUST_VER}" --default-host $(uname -m)-unknown-linux-musl

ENV PATH="/root/.cargo/bin:${PATH}"

RUN rustup target add wasm32-unknown-unknown

RUN cargo search whatever # creates .cargo cache

# 2. stage
FROM --platform=$TARGETPLATFORM rust_builder as builder

ARG DONT_EXEC_TESTS
ARG RUST_VER

WORKDIR /opt/darkfi

COPY . ./

ARG RUSTFLAGS="-C target-feature=-crt-static"

RUN cargo update

RUN make clean

RUN rm -rf ./target/ zkas proof/*.bin

RUN bash -c "if [ -z \"$DONT_EXEC_TESTS\" ]; then make -j test; fi"

RUN bash -c 'make -j all'

# 3. stage
FROM --platform=$TARGETPLATFORM ${REPOSITORY}:${OS_VER}

RUN apk add --no-cache openssl ttf-opensans libgcc alsa-lib sqlite-libs

WORKDIR /opt/darkfi

COPY --from=builder /opt/darkfi/drk /opt/darkfi/darkfid  \
   /opt/darkfi/darkirc /opt/darkfi/faucetd \
   /opt/darkfi/zkas /opt/darkfi/vanityaddr \
   /opt/darkfi/tau /opt/darkfi/taud   ./

