# Circuit used to mint arbitrary coins given a mint authority secret.
k = 11;
field = "pallas";

constant "AuthTokenMint_V1" {
    EcFixedPointShort VALUE_COMMIT_VALUE,
    EcFixedPoint VALUE_COMMIT_RANDOM,
    EcFixedPointBase NULLIFIER_K,
}

witness "AuthTokenMint_V1" {
    # CoinAttributes {
    Base coin_public_x,
    Base coin_public_y,
    Base coin_value,
    Base coin_spend_hook,
    Base coin_user_data,
    Base coin_blind,
    # }

    # TokenAttributes {
    Base token_auth_parent,
    Base token_blind,
    # }

    # Secret key used by mint
    Base mint_secret,

    # Random blinding factor for the value commitment
    Scalar value_commit_blind,
}

circuit "AuthTokenMint_V1" {
    # Derive public key for the mint authority
    mint_public = ec_mul_base(mint_secret, NULLIFIER_K);
    mint_x = ec_get_x(mint_public);
    mint_y = ec_get_y(mint_public);
    constrain_instance(mint_x);
    constrain_instance(mint_y);

    # Derive the token ID
    token_user_data = poseidon_hash(mint_x, mint_y);
    token_id = poseidon_hash(token_auth_parent, token_user_data, token_blind);
    constrain_instance(token_id);

    # Poseidon hash of the minted coin
    coin = poseidon_hash(
        coin_public_x,
        coin_public_y,
        coin_value,
        token_id,
        coin_spend_hook,
        coin_user_data,
        coin_blind
    );
    constrain_instance(coin);

    # Pedersen commitment for the coin's value
    vcv = ec_mul_short(coin_value, VALUE_COMMIT_VALUE);
    vcr = ec_mul(value_commit_blind, VALUE_COMMIT_RANDOM);
    value_commit = ec_add(vcv, vcr);
    constrain_instance(ec_get_x(value_commit));
    constrain_instance(ec_get_y(value_commit));
}
