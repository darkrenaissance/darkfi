k = 11;
field = "pallas";

constant "VoteMain" {
    EcFixedPoint VALUE_COMMIT_RANDOM,
    EcFixedPointShort VALUE_COMMIT_VALUE,
    EcFixedPointBase NULLIFIER_K,
    EcFixedPointBase VALUE_COMMIT_RANDOM_BASE,
}

witness "VoteMain" {
    # Proposal parameters
    Base proposal_auth_calls_commit,
    Base proposal_current_day,
    Base proposal_duration_days,
    Base proposal_user_data,
    Base proposal_blind,

    # DAO parameters
    Base dao_proposer_limit,
    Base dao_quorum,
    Base dao_approval_ratio_quot,
    Base dao_approval_ratio_base,
    Base dao_gov_token_id,
    EcNiPoint dao_public_key,
    Base dao_bulla_blind,

    # Is the vote yes or no
    Base vote_option,
    Base yes_vote_blind,

    # Total amount of capital allocated to vote
    Base all_vote_value,
    Base all_vote_blind,

    # Check the inputs and this proof are for the same token
    Base gov_token_blind,

    # Check whether the proposal has expired or not
    Base current_day,

    Base ephem_secret,
}

circuit "VoteMain" {
    token_commit = poseidon_hash(dao_gov_token_id, gov_token_blind);
    constrain_instance(token_commit);

    # cast to EcPoint
    # (otherwise zkas refuses to compile)
    ONE = witness_base(1);
    dao_pubkey = ec_mul_var_base(ONE, dao_public_key);
    dao_public_x = ec_get_x(dao_pubkey);
    dao_public_y = ec_get_y(dao_pubkey);

    dao_bulla = poseidon_hash(
        dao_proposer_limit,
        dao_quorum,
        dao_approval_ratio_quot,
        dao_approval_ratio_base,
        dao_gov_token_id,
        dao_public_x,
        dao_public_y,
        dao_bulla_blind,
    );

    proposal_bulla = poseidon_hash(
        proposal_auth_calls_commit,
        proposal_current_day,
        proposal_duration_days,
        proposal_user_data,
        dao_bulla,
        proposal_blind,
    );
    constrain_instance(proposal_bulla);

    # Normally we call this yes vote
    # Pedersen commitment for vote option
    yes_vote_value = base_mul(vote_option, all_vote_value);
    yes_vote_value_c = ec_mul_short(yes_vote_value, VALUE_COMMIT_VALUE);
    yes_vote_blind_c = ec_mul_base(yes_vote_blind, VALUE_COMMIT_RANDOM_BASE);
    yes_vote_commit = ec_add(yes_vote_value_c, yes_vote_blind_c);
    constrain_instance(ec_get_x(yes_vote_commit));
    constrain_instance(ec_get_y(yes_vote_commit));

    # Pedersen commitment for vote value
    all_vote_c = ec_mul_short(all_vote_value, VALUE_COMMIT_VALUE);
    all_vote_blind_c = ec_mul_base(all_vote_blind, VALUE_COMMIT_RANDOM_BASE);
    all_vote_commit = ec_add(all_vote_c, all_vote_blind_c);
    constrain_instance(ec_get_x(all_vote_commit));
    constrain_instance(ec_get_y(all_vote_commit));

    # Vote option should be 0 or 1
    bool_check(vote_option);

    # Enforce that the proposal has not expired
    end_time = base_add(proposal_current_day, proposal_duration_days);
    less_than_strict(current_day, end_time);
    constrain_instance(current_day);

    # Verifiable encryption
    ephem_public = ec_mul_base(ephem_secret, NULLIFIER_K);
    constrain_instance(ec_get_x(ephem_public));
    constrain_instance(ec_get_y(ephem_public));
    shared_point = ec_mul_var_base(ephem_secret, dao_public_key);
    shared_secret = poseidon_hash(
        ec_get_x(shared_point),
        ec_get_y(shared_point),
    );
    const_1 = witness_base(1);
    const_2 = witness_base(2);
    const_3 = witness_base(3);
    const_4 = witness_base(4);
    # Vote option
    shared_secret_1 = poseidon_hash(shared_secret, const_1);
    enc_vote_option = base_add(vote_option, shared_secret_1);
    constrain_instance(enc_vote_option);
    # Yes vote blind
    shared_secret_2 = poseidon_hash(shared_secret, const_2);
    enc_yes_vote_blind = base_add(yes_vote_blind, shared_secret_2);
    constrain_instance(enc_yes_vote_blind);
    # All vote value
    shared_secret_3 = poseidon_hash(shared_secret, const_3);
    enc_all_vote_value = base_add(all_vote_value, shared_secret_3);
    constrain_instance(enc_all_vote_value);
    # All vote blind
    shared_secret_4 = poseidon_hash(shared_secret, const_4);
    enc_all_vote_blind = base_add(all_vote_blind, shared_secret_4);
    constrain_instance(enc_all_vote_blind);
}
